//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RayCarrot.RCP.Metro {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RayCarrot.RCP.Metro.Localization.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (BETA).
        /// </summary>
        public static string About_BetaTag {
            get {
                return ResourceManager.GetString("About_BetaTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you want to uninstall the Rayman Control Panel? This will remove the executable file and all of the program&apos;s app data. This will NOT remove any installed games, save files or backups. Some applied utilities may still be available..
        /// </summary>
        public static string About_ConfirmUninstall {
            get {
                return ResourceManager.GetString("About_ConfirmUninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm uninstall.
        /// </summary>
        public static string About_ConfirmUninstallHeader {
            get {
                return ResourceManager.GetString("About_ConfirmUninstallHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Credits.
        /// </summary>
        public static string About_Credits {
            get {
                return ResourceManager.GetString("About_Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dutch program translation, program testing.
        /// </summary>
        public static string About_Credits_432Hz {
            get {
                return ResourceManager.GetString("About_Credits_432Hz", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File structure for the education Rayman games.
        /// </summary>
        public static string About_Credits_EvelynChickentalk {
            get {
                return ResourceManager.GetString("About_Credits_EvelynChickentalk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 2 translations, Portuguese program translation.
        /// </summary>
        public static string About_Credits_HarukaTavares {
            get {
                return ResourceManager.GetString("About_Credits_HarukaTavares", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Spanish program translation.
        /// </summary>
        public static string About_Credits_ICUP321 {
            get {
                return ResourceManager.GetString("About_Credits_ICUP321", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 2 button remapping.
        /// </summary>
        public static string About_Credits_Janmv94 {
            get {
                return ResourceManager.GetString("About_Credits_Janmv94", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controller patches.
        /// </summary>
        public static string About_Credits_Noserdog {
            get {
                return ResourceManager.GetString("About_Credits_Noserdog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serbian program translation.
        /// </summary>
        public static string About_Credits_OldClassicGamer {
            get {
                return ResourceManager.GetString("About_Credits_OldClassicGamer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to German program translation.
        /// </summary>
        public static string About_Credits_PhilippJeindl {
            get {
                return ResourceManager.GetString("About_Credits_PhilippJeindl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Polish program translation.
        /// </summary>
        public static string About_Credits_Pixelise {
            get {
                return ResourceManager.GetString("About_Credits_Pixelise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 2 translations.
        /// </summary>
        public static string About_Credits_PluMGMK {
            get {
                return ResourceManager.GetString("About_Credits_PluMGMK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Graphics, program testing.
        /// </summary>
        public static string About_Credits_RayActivity {
            get {
                return ResourceManager.GetString("About_Credits_RayActivity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User interface, Carrot Framework, game finder, game installer, utilities, Rayman 2 translations, Swedish program translation.
        /// </summary>
        public static string About_Credits_RayCarrot {
            get {
                return ResourceManager.GetString("About_Credits_RayCarrot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cheat code list, general help with the utilities.
        /// </summary>
        public static string About_Credits_RibShark {
            get {
                return ResourceManager.GetString("About_Credits_RibShark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman PlayStation Soundtrack utility.
        /// </summary>
        public static string About_Credits_Snagglebee {
            get {
                return ResourceManager.GetString("About_Credits_Snagglebee", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discord.
        /// </summary>
        public static string About_Discord {
            get {
                return ResourceManager.GetString("About_Discord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Email.
        /// </summary>
        public static string About_Email {
            get {
                return ResourceManager.GetString("About_Email", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GitHub.
        /// </summary>
        public static string About_GitHub {
            get {
                return ResourceManager.GetString("About_GitHub", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Control Panel is an open source community project created by RayCarrot. This software is a single free to use executable file with the intent to easily access settings and fixes for the various Rayman titles released for Windows.
        ///This is a growing project with more features planned on being added with future updates. The utilities and various configuration tools have been created with help from various members of the Rayman community, all credited below..
        /// </summary>
        public static string About_ProgramInfo {
            get {
                return ResourceManager.GetString("About_ProgramInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Special thanks to AuToMaNiAk005, MixerX, ICUP321, PokGOT4N and all other Rayman fans!.
        /// </summary>
        public static string About_SpecialThanks {
            get {
                return ResourceManager.GetString("About_SpecialThanks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam group.
        /// </summary>
        public static string About_Steam {
            get {
                return ResourceManager.GetString("About_Steam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Twitter.
        /// </summary>
        public static string About_Twitter {
            get {
                return ResourceManager.GetString("About_Twitter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall.
        /// </summary>
        public static string About_Uninstall {
            get {
                return ResourceManager.GetString("About_Uninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when running the uninstaller. You can manually remove the app data which is located in the following locations:
        ///
        ///{0}.
        /// </summary>
        public static string About_UninstallFailed {
            get {
                return ResourceManager.GetString("About_UninstallFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check for new updates.
        /// </summary>
        public static string About_UpdateCheck {
            get {
                return ResourceManager.GetString("About_UpdateCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update history.
        /// </summary>
        public static string About_UpdateHistory {
            get {
                return ResourceManager.GetString("About_UpdateHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to YouTube.
        /// </summary>
        public static string About_YouTube {
            get {
                return ResourceManager.GetString("About_YouTube", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        public static string AboutPageHeader {
            get {
                return ResourceManager.GetString("AboutPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accept.
        /// </summary>
        public static string Accept {
            get {
                return ResourceManager.GetString("Accept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action succeeded.
        /// </summary>
        public static string ActionSucceeded {
            get {
                return ResourceManager.GetString("ActionSucceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game {0} has already been added.
        /// </summary>
        public static string AddGame_Duplicate {
            get {
                return ResourceManager.GetString("AddGame_Duplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error adding new game.
        /// </summary>
        public static string AddGame_DuplicateHeader {
            get {
                return ResourceManager.GetString("AddGame_DuplicateHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Control Panel.
        /// </summary>
        public static string AppName {
            get {
                return ResourceManager.GetString("AppName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Control Panel (Administrator).
        /// </summary>
        public static string AppNameAdmin {
            get {
                return ResourceManager.GetString("AppNameAdmin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version History.
        /// </summary>
        public static string AppNews_Header {
            get {
                return ResourceManager.GetString("AppNews_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to App News.
        /// </summary>
        public static string AppNews_Title {
            get {
                return ResourceManager.GetString("AppNews_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup.
        /// </summary>
        public static string Backup_Backup {
            get {
                return ResourceManager.GetString("Backup_Backup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup All.
        /// </summary>
        public static string Backup_BackupAll {
            get {
                return ResourceManager.GetString("Backup_BackupAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}/{1} games were backed up.
        /// </summary>
        public static string Backup_BackupAllFailed {
            get {
                return ResourceManager.GetString("Backup_BackupAllFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some games were not backed up.
        /// </summary>
        public static string Backup_BackupAllFailedHeader {
            get {
                return ResourceManager.GetString("Backup_BackupAllFailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All games were successfully backed up.
        /// </summary>
        public static string Backup_BackupAllSuccess {
            get {
                return ResourceManager.GetString("Backup_BackupAllSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compress backups.
        /// </summary>
        public static string Backup_Compress {
            get {
                return ResourceManager.GetString("Backup_Compress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compressed backups will take less space and be easier to manage due to being in a single file for each game. The change will go into effect the next time a backup is performed..
        /// </summary>
        public static string Backup_CompressInfo {
            get {
                return ResourceManager.GetString("Backup_CompressInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace any previous backups for {0}.
        /// </summary>
        public static string Backup_Confirm {
            get {
                return ResourceManager.GetString("Backup_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to back up all games? This will replace any previous backups. Continue?.
        /// </summary>
        public static string Backup_ConfirmBackupAll {
            get {
                return ResourceManager.GetString("Backup_ConfirmBackupAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm Backups.
        /// </summary>
        public static string Backup_ConfirmBackupAllHeader {
            get {
                return ResourceManager.GetString("Backup_ConfirmBackupAllHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm backup.
        /// </summary>
        public static string Backup_ConfirmHeader {
            get {
                return ResourceManager.GetString("Backup_ConfirmHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup failed for {0}.
        /// </summary>
        public static string Backup_Failed {
            get {
                return ResourceManager.GetString("Backup_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup failed.
        /// </summary>
        public static string Backup_FailedHeader {
            get {
                return ResourceManager.GetString("Backup_FailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This game might have its save files synced through GOG Galaxy. If so the backup/restore utility might not effect this game even though the operation succeeds..
        /// </summary>
        public static string Backup_GOGSyncWarning {
            get {
                return ResourceManager.GetString("Backup_GOGSyncWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup/Restore warning.
        /// </summary>
        public static string Backup_GOGSyncWarningHeader {
            get {
                return ResourceManager.GetString("Backup_GOGSyncWarningHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Last Backup.
        /// </summary>
        public static string Backup_LastBackupDate {
            get {
                return ResourceManager.GetString("Backup_LastBackupDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup Size.
        /// </summary>
        public static string Backup_LastBackupSize {
            get {
                return ResourceManager.GetString("Backup_LastBackupSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup for {0} could not finish due to not all specified directories being found.
        /// </summary>
        public static string Backup_MissingDirectoriesError {
            get {
                return ResourceManager.GetString("Backup_MissingDirectoriesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No files were found to backup for {0}.
        /// </summary>
        public static string Backup_MissingFilesError {
            get {
                return ResourceManager.GetString("Backup_MissingFilesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore.
        /// </summary>
        public static string Backup_Restore {
            get {
                return ResourceManager.GetString("Backup_Restore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your save files for {0} were successfully backed up.
        /// </summary>
        public static string Backup_Success {
            get {
                return ResourceManager.GetString("Backup_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup successful.
        /// </summary>
        public static string Backup_SuccessHeader {
            get {
                return ResourceManager.GetString("Backup_SuccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup/Restore.
        /// </summary>
        public static string BackupPageHeader {
            get {
                return ResourceManager.GetString("BackupPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse.
        /// </summary>
        public static string BrowseBox_Browse {
            get {
                return ResourceManager.GetString("BrowseBox_Browse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string Cancel {
            get {
                return ResourceManager.GetString("Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access Denied screen.
        /// </summary>
        public static string Cheats_Location_AccessDenied {
            get {
                return ResourceManager.GetString("Cheats_Location_AccessDenied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Credits.
        /// </summary>
        public static string Cheats_Location_Credits {
            get {
                return ResourceManager.GetString("Cheats_Location_Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cutscene.
        /// </summary>
        public static string Cheats_Location_Cutscene {
            get {
                return ResourceManager.GetString("Cheats_Location_Cutscene", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Level.
        /// </summary>
        public static string Cheats_Location_Level {
            get {
                return ResourceManager.GetString("Cheats_Location_Level", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Map.
        /// </summary>
        public static string Cheats_Location_Map {
            get {
                return ResourceManager.GetString("Cheats_Location_Map", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pause screen.
        /// </summary>
        public static string Cheats_Location_Pause {
            get {
                return ResourceManager.GetString("Cheats_Location_Pause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Profile name.
        /// </summary>
        public static string Cheats_Location_ProfileName {
            get {
                return ResourceManager.GetString("Cheats_Location_ProfileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tomb of the Ancients part 3, while standing on the third panel away from the entrance to the Technical Check-up where Rayman fights Clark.
        /// </summary>
        public static string Cheats_Location_TotA3 {
            get {
                return ResourceManager.GetString("Cheats_Location_TotA3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Different cheat codes will work in different versions. Some versions support multiple cheat code types..
        /// </summary>
        public static string Cheats_R1 {
            get {
                return ResourceManager.GetString("Cheats_R1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to freq10.
        /// </summary>
        public static string Cheats_R1_100RefreshRateInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_100RefreshRateInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 100MHz Refresh rate.
        /// </summary>
        public static string Cheats_R1_100RefreshRateTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_100RefreshRateTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 86e40g91.
        /// </summary>
        public static string Cheats_R1_10TingsInput1 {
            get {
                return ResourceManager.GetString("Cheats_R1_10TingsInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to raywiz.
        /// </summary>
        public static string Cheats_R1_10TingsInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_10TingsInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]jojo.
        /// </summary>
        public static string Cheats_R1_10TingsInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_10TingsInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 10 added Tings.
        /// </summary>
        public static string Cheats_R1_10TingsTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_10TingsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to freq80.
        /// </summary>
        public static string Cheats_R1_80RefreshRateInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_80RefreshRateInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 80MHz Refresh rate.
        /// </summary>
        public static string Cheats_R1_80RefreshRateTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_80RefreshRateTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to trj8p.
        /// </summary>
        public static string Cheats_R1_99LivesInput1 {
            get {
                return ResourceManager.GetString("Cheats_R1_99LivesInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to raylives.
        /// </summary>
        public static string Cheats_R1_99LivesInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_99LivesInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]bertrand.
        /// </summary>
        public static string Cheats_R1_99LivesInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_99LivesInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 99 lives.
        /// </summary>
        public static string Cheats_R1_99LivesTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_99LivesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4ctrepfj.
        /// </summary>
        public static string Cheats_R1_AllLevelsInput1 {
            get {
                return ResourceManager.GetString("Cheats_R1_AllLevelsInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to alworld.
        /// </summary>
        public static string Cheats_R1_AllLevelsInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_AllLevelsInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]francois.
        /// </summary>
        public static string Cheats_R1_AllLevelsInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_AllLevelsInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all levels.
        /// </summary>
        public static string Cheats_R1_AllLevelsTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_AllLevelsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to en5gol2g.
        /// </summary>
        public static string Cheats_R1_AllPowerUpsInput1 {
            get {
                return ResourceManager.GetString("Cheats_R1_AllPowerUpsInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to power.
        /// </summary>
        public static string Cheats_R1_AllPowerUpsInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_AllPowerUpsInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]benoit.
        /// </summary>
        public static string Cheats_R1_AllPowerUpsInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_AllPowerUpsInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All normal powers.
        /// </summary>
        public static string Cheats_R1_AllPowerUpsTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_AllPowerUpsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to b76b7081.
        /// </summary>
        public static string Cheats_R1_BreakoutInput1 {
            get {
                return ResourceManager.GetString("Cheats_R1_BreakoutInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cbray.
        /// </summary>
        public static string Cheats_R1_BreakoutInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_BreakoutInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]olivier.
        /// </summary>
        public static string Cheats_R1_BreakoutInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_BreakoutInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]cbrayal[BACKSPACE].
        /// </summary>
        public static string Cheats_R1_BreakoutStageInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_BreakoutStageInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter random stage from Breakout minigame.
        /// </summary>
        public static string Cheats_R1_BreakoutStageTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_BreakoutStageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter Breakout minigame (requires Mr Dark&apos;s Dare to have been completed).
        /// </summary>
        public static string Cheats_R1_BreakoutTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_BreakoutTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2x2rmfmf.
        /// </summary>
        public static string Cheats_R1_FistPowerInput1 {
            get {
                return ResourceManager.GetString("Cheats_R1_FistPowerInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to goldfist.
        /// </summary>
        public static string Cheats_R1_FistPowerInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_FistPowerInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]antoine.
        /// </summary>
        public static string Cheats_R1_FistPowerInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_FistPowerInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All fist power-ups.
        /// </summary>
        public static string Cheats_R1_FistPowerTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_FistPowerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB];overay[BACKSPACE].
        /// </summary>
        public static string Cheats_R1_FreeMovementInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_FreeMovementInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Free movement.
        /// </summary>
        public static string Cheats_R1_FreeMovementTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_FreeMovementTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to kom0ogdk.
        /// </summary>
        public static string Cheats_R1_FullHealthInput1 {
            get {
                return ResourceManager.GetString("Cheats_R1_FullHealthInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to raypoint.
        /// </summary>
        public static string Cheats_R1_FullHealthInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_FullHealthInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]christ.
        /// </summary>
        public static string Cheats_R1_FullHealthInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_FullHealthInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full health.
        /// </summary>
        public static string Cheats_R1_FullHealthTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_FullHealthTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]program.
        /// </summary>
        public static string Cheats_R1_HiddenMessageInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_HiddenMessageInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display hidden message.
        /// </summary>
        public static string Cheats_R1_HiddenMessageTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_HiddenMessageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to lens.
        /// </summary>
        public static string Cheats_R1_LensEffectInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_LensEffectInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lens effect.
        /// </summary>
        public static string Cheats_R1_LensEffectTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_LensEffectTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]alevel[BACKSPACE].
        /// </summary>
        public static string Cheats_R1_SelectStageInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_SelectStageInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stage selection.
        /// </summary>
        public static string Cheats_R1_SelectStageTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_SelectStageTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to o8feh.
        /// </summary>
        public static string Cheats_R1_SkipLevelInput1 {
            get {
                return ResourceManager.GetString("Cheats_R1_SkipLevelInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to winmap.
        /// </summary>
        public static string Cheats_R1_SkipLevelInput2 {
            get {
                return ResourceManager.GetString("Cheats_R1_SkipLevelInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]cyril.
        /// </summary>
        public static string Cheats_R1_SkipLevelInput3 {
            get {
                return ResourceManager.GetString("Cheats_R1_SkipLevelInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip level section.
        /// </summary>
        public static string Cheats_R1_SkipLevelTitle {
            get {
                return ResourceManager.GetString("Cheats_R1_SkipLevelTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to gimmelumz.
        /// </summary>
        public static string Cheats_R2_5LumsInput {
            get {
                return ResourceManager.GetString("Cheats_R2_5LumsInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gain 5 Yellow Lums.
        /// </summary>
        public static string Cheats_R2_5LumsTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_5LumsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A[NUMPAD 0]QWQW[ENTER].
        /// </summary>
        public static string Cheats_R2_BonusLevelInput {
            get {
                return ResourceManager.GetString("Cheats_R2_BonusLevelInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter bonus level without all Lums and Cages.
        /// </summary>
        public static string Cheats_R2_BonusLevelTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_BonusLevelTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to glowfist.
        /// </summary>
        public static string Cheats_R2_FistUpgradeInput {
            get {
                return ResourceManager.GetString("Cheats_R2_FistUpgradeInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Upgrade magic fist.
        /// </summary>
        public static string Cheats_R2_FistUpgradeTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_FistUpgradeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to hangon.
        /// </summary>
        public static string Cheats_R2_GrappleInput {
            get {
                return ResourceManager.GetString("Cheats_R2_GrappleInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock grappling power.
        /// </summary>
        public static string Cheats_R2_GrappleTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_GrappleTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to gothere.
        /// </summary>
        public static string Cheats_R2_LevelSelectionInput {
            get {
                return ResourceManager.GetString("Cheats_R2_LevelSelectionInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Go to any level.
        /// </summary>
        public static string Cheats_R2_LevelSelectionTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_LevelSelectionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to allvign.
        /// </summary>
        public static string Cheats_R2_LoadingScreensInput {
            get {
                return ResourceManager.GetString("Cheats_R2_LoadingScreensInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New loading screens.
        /// </summary>
        public static string Cheats_R2_LoadingScreensTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_LoadingScreensTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to press and release the J key to the rhythm of the Rayman 2 theme.
        /// </summary>
        public static string Cheats_R2_MaxHealthInput {
            get {
                return ResourceManager.GetString("Cheats_R2_MaxHealthInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gain maximum health.
        /// </summary>
        public static string Cheats_R2_MaxHealthTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_MaxHealthTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to shootemup.
        /// </summary>
        public static string Cheats_R2_MenezisInput {
            get {
                return ResourceManager.GetString("Cheats_R2_MenezisInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access Menezis.
        /// </summary>
        public static string Cheats_R2_MenezisTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_MenezisTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nomoremurfy.
        /// </summary>
        public static string Cheats_R2_NoMurfyInput {
            get {
                return ResourceManager.GetString("Cheats_R2_NoMurfyInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable Murfy.
        /// </summary>
        public static string Cheats_R2_NoMurfyTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_NoMurfyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to gimmelife.
        /// </summary>
        public static string Cheats_R2_RestoreHealthInput {
            get {
                return ResourceManager.GetString("Cheats_R2_RestoreHealthInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore health.
        /// </summary>
        public static string Cheats_R2_RestoreHealthTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_RestoreHealthTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nomovies.
        /// </summary>
        public static string Cheats_R2_SkipMoviesInput {
            get {
                return ResourceManager.GetString("Cheats_R2_SkipMoviesInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip cutscenes.
        /// </summary>
        public static string Cheats_R2_SkipMoviesTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_SkipMoviesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to playjeff.
        /// </summary>
        public static string Cheats_R2_TotASecretInput {
            get {
                return ResourceManager.GetString("Cheats_R2_TotASecretInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access hidden area in Tomb of the Ancients.
        /// </summary>
        public static string Cheats_R2_TotASecretTitle {
            get {
                return ResourceManager.GetString("Cheats_R2_TotASecretTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]lives20[BACKSPACE].
        /// </summary>
        public static string Cheats_RD_20LivesInput {
            get {
                return ResourceManager.GetString("Cheats_RD_20LivesInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 20 lives.
        /// </summary>
        public static string Cheats_RD_20LivesTitle {
            get {
                return ResourceManager.GetString("Cheats_RD_20LivesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]lives50[BACKSPACE].
        /// </summary>
        public static string Cheats_RD_50LivesInput {
            get {
                return ResourceManager.GetString("Cheats_RD_50LivesInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 50 lives.
        /// </summary>
        public static string Cheats_RD_50LivesTitle {
            get {
                return ResourceManager.GetString("Cheats_RD_50LivesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]lives05[BACKSPACE].
        /// </summary>
        public static string Cheats_RD_5LivesInput {
            get {
                return ResourceManager.GetString("Cheats_RD_5LivesInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 5 lives.
        /// </summary>
        public static string Cheats_RD_5LivesTitle {
            get {
                return ResourceManager.GetString("Cheats_RD_5LivesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]openall[BACKSPACE].
        /// </summary>
        public static string Cheats_RD_AllLevelsInput {
            get {
                return ResourceManager.GetString("Cheats_RD_AllLevelsInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all levels.
        /// </summary>
        public static string Cheats_RD_AllLevelsTitle {
            get {
                return ResourceManager.GetString("Cheats_RD_AllLevelsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]finishing.
        /// </summary>
        public static string Cheats_RD_FinishLevelInput {
            get {
                return ResourceManager.GetString("Cheats_RD_FinishLevelInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finish level.
        /// </summary>
        public static string Cheats_RD_FinishLevelTitle {
            get {
                return ResourceManager.GetString("Cheats_RD_FinishLevelTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]goldens.
        /// </summary>
        public static string Cheats_RD_FistPowerInput {
            get {
                return ResourceManager.GetString("Cheats_RD_FistPowerInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All fist power-ups.
        /// </summary>
        public static string Cheats_RD_FistPowerTitle {
            get {
                return ResourceManager.GetString("Cheats_RD_FistPowerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]moveray[BACKSPACE].
        /// </summary>
        public static string Cheats_RD_FreeMovementInput {
            get {
                return ResourceManager.GetString("Cheats_RD_FreeMovementInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Free movement.
        /// </summary>
        public static string Cheats_RD_FreeMovementTitle {
            get {
                return ResourceManager.GetString("Cheats_RD_FreeMovementTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]points.
        /// </summary>
        public static string Cheats_RD_FullHealthInput {
            get {
                return ResourceManager.GetString("Cheats_RD_FullHealthInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full health.
        /// </summary>
        public static string Cheats_RD_FullHealthTitle {
            get {
                return ResourceManager.GetString("Cheats_RD_FullHealthTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [TAB]map[BACKSPACE].
        /// </summary>
        public static string Cheats_RD_MapIndexInput {
            get {
                return ResourceManager.GetString("Cheats_RD_MapIndexInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display map index.
        /// </summary>
        public static string Cheats_RD_MapIndexTitle {
            get {
                return ResourceManager.GetString("Cheats_RD_MapIndexTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Music team:
        ///To activate it, enter race mode and pause the game. On the pause screen, hold L1 + R1 (or equivalent on the currently used controller), then press the optimize button. Five blue balls will appear at the bottom of the screen. Release alll buttons and press jump. The player should hear a high pitched &quot;ding&quot; sound, and after 0.5 seconds, the first ball should turn yellow. As soon as the ball turns yellow, hold jump. The second ball should then turn yellow. As soon as the second ball turns yellow,  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Cheats_RM {
            get {
                return ResourceManager.GetString("Cheats_RM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter PUPPETS as a profile name and press Shift + Ctrl + Alt.
        /// </summary>
        public static string Cheats_RM_AllCharactersInput {
            get {
                return ResourceManager.GetString("Cheats_RM_AllCharactersInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all characters.
        /// </summary>
        public static string Cheats_RM_AllCharactersTitle {
            get {
                return ResourceManager.GetString("Cheats_RM_AllCharactersTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter CARNIVAL as a profile name and press Shift + Ctrl + Alt.
        /// </summary>
        public static string Cheats_RM_AllSkinsInput {
            get {
                return ResourceManager.GetString("Cheats_RM_AllSkinsInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all skins.
        /// </summary>
        public static string Cheats_RM_AllSkinsTitle {
            get {
                return ResourceManager.GetString("Cheats_RM_AllSkinsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter ARENAS as a profile name and press Shift + Ctrl + Alt.
        /// </summary>
        public static string Cheats_RM_Battle1Input {
            get {
                return ResourceManager.GetString("Cheats_RM_Battle1Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all battle levels in mode 1.
        /// </summary>
        public static string Cheats_RM_Battle1Title {
            get {
                return ResourceManager.GetString("Cheats_RM_Battle1Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter FIELDS as a profile name and press Shift + Ctrl + Alt.
        /// </summary>
        public static string Cheats_RM_Levels1Input {
            get {
                return ResourceManager.GetString("Cheats_RM_Levels1Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all levels in mode 1.
        /// </summary>
        public static string Cheats_RM_Levels1Title {
            get {
                return ResourceManager.GetString("Cheats_RM_Levels1Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter TRACKS as a profile name and press Shift + Ctrl + Alt.
        /// </summary>
        public static string Cheats_RM_Race1Input {
            get {
                return ResourceManager.GetString("Cheats_RM_Race1Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all race levels in mode 1.
        /// </summary>
        public static string Cheats_RM_Race1Title {
            get {
                return ResourceManager.GetString("Cheats_RM_Race1Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter OLDTV as a profile name and press Shift + Ctrl + Alt.
        /// </summary>
        public static string Cheats_RM_RagtimeMusicInput {
            get {
                return ResourceManager.GetString("Cheats_RM_RagtimeMusicInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ragtime music in races.
        /// </summary>
        public static string Cheats_RM_RagtimeMusicTitle {
            get {
                return ResourceManager.GetString("Cheats_RM_RagtimeMusicTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter ALLRAYMANM as a profile name and press Shift + Ctrl + Alt.
        /// </summary>
        public static string Cheats_RM_UnlockAllInput {
            get {
                return ResourceManager.GetString("Cheats_RM_UnlockAllInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all levels.
        /// </summary>
        public static string Cheats_RM_UnlockAllTitle {
            get {
                return ResourceManager.GetString("Cheats_RM_UnlockAllTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter ALLFISH as a profile name and press Shift + Ctrl + Alt.
        /// </summary>
        public static string Cheats_RM_UnlockBattlesInput {
            get {
                return ResourceManager.GetString("Cheats_RM_UnlockBattlesInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all battle levels.
        /// </summary>
        public static string Cheats_RM_UnlockBattlesTitle {
            get {
                return ResourceManager.GetString("Cheats_RM_UnlockBattlesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter ALLTRIBES as a profile name and press Shift + Ctrl + Alt.
        /// </summary>
        public static string Cheats_RM_UnlockRacesInput {
            get {
                return ResourceManager.GetString("Cheats_RM_UnlockRacesInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlock all race levels.
        /// </summary>
        public static string Cheats_RM_UnlockRacesTitle {
            get {
                return ResourceManager.GetString("Cheats_RM_UnlockRacesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to reverse.
        /// </summary>
        public static string Cheats_RM3_ReverseMapInput {
            get {
                return ResourceManager.GetString("Cheats_RM3_ReverseMapInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reverse map.
        /// </summary>
        public static string Cheats_RM3_ReverseMapTitle {
            get {
                return ResourceManager.GetString("Cheats_RM3_ReverseMapTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to esc.
        /// </summary>
        public static string Cheats_RM3_SkipMovieInput {
            get {
                return ResourceManager.GetString("Cheats_RM3_SkipMovieInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip cutscenes.
        /// </summary>
        public static string Cheats_RM3_SkipMovieTitle {
            get {
                return ResourceManager.GetString("Cheats_RM3_SkipMovieTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Button Mapping (keyboard).
        /// </summary>
        public static string Config_ButtonMapping {
            get {
                return ResourceManager.GetString("Config_ButtonMapping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action.
        /// </summary>
        public static string Config_ButtonMappingActionHeader {
            get {
                return ResourceManager.GetString("Config_ButtonMappingActionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As the game doesn&apos;t allow native button remapping you change it here. This will not work for controllers..
        /// </summary>
        public static string Config_ButtonMappingInfo {
            get {
                return ResourceManager.GetString("Config_ButtonMappingInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key.
        /// </summary>
        public static string Config_ButtonMappingKeyHeader {
            get {
                return ResourceManager.GetString("Config_ButtonMappingKeyHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset.
        /// </summary>
        public static string Config_ButtonMappingReset {
            get {
                return ResourceManager.GetString("Config_ButtonMappingReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compressed.
        /// </summary>
        public static string Config_Compressed {
            get {
                return ResourceManager.GetString("Config_Compressed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controller.
        /// </summary>
        public static string Config_Controller {
            get {
                return ResourceManager.GetString("Config_Controller", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Horizontal Axis.
        /// </summary>
        public static string Config_ControllerHorizontal {
            get {
                return ResourceManager.GetString("Config_ControllerHorizontal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If your controller is not recognized you can enable controller support here.
        /// </summary>
        public static string Config_ControllerInfo {
            get {
                return ResourceManager.GetString("Config_ControllerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If your controller is not recognized you can enable controller support here. This will remove any custom button mapping..
        /// </summary>
        public static string Config_ControllerR2Info {
            get {
                return ResourceManager.GetString("Config_ControllerR2Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical Axis.
        /// </summary>
        public static string Config_ControllerVertical {
            get {
                return ResourceManager.GetString("Config_ControllerVertical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when saving your DosBox configuration.
        /// </summary>
        public static string Config_DosBoxSaveError {
            get {
                return ResourceManager.GetString("Config_DosBoxSaveError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dynamic Shadows.
        /// </summary>
        public static string Config_DynamicShadows {
            get {
                return ResourceManager.GetString("Config_DynamicShadows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable native controller support.
        /// </summary>
        public static string Config_EnableNativeController {
            get {
                return ResourceManager.GetString("Config_EnableNativeController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Fiesta Run version.
        /// </summary>
        public static string Config_FiestaRunVersion {
            get {
                return ResourceManager.GetString("Config_FiestaRunVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you have multiple versions of Rayman Fiesta Run you can change the default version to launch here.
        /// </summary>
        public static string Config_FiestaRunVersionInfo {
            get {
                return ResourceManager.GetString("Config_FiestaRunVersionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen.
        /// </summary>
        public static string Config_Fullscreen {
            get {
                return ResourceManager.GetString("Config_Fullscreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes the game run in fullscreen, otherwise it&apos;ll run in windowed mode.
        /// </summary>
        public static string Config_FullscreenInfo {
            get {
                return ResourceManager.GetString("Config_FullscreenInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Graphics.
        /// </summary>
        public static string Config_Graphics {
            get {
                return ResourceManager.GetString("Config_Graphics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No valid ubi.ini file was found and creating a new one failed. Try running the program as administrator or changing the folder permissions for the following path: {0}.
        /// </summary>
        public static string Config_InvalidR2UbiIniFile {
            get {
                return ResourceManager.GetString("Config_InvalidR2UbiIniFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No valid ubi.ini file was found and creating a new one failed. Try running the program as administrator or changing the folder permissions for the following path: {0}.
        /// </summary>
        public static string Config_InvalidUbiIni {
            get {
                return ResourceManager.GetString("Config_InvalidUbiIni", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string Config_Language {
            get {
                return ResourceManager.GetString("Config_Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sets the default language selected when launching the game. The language can still be changed from the game menu..
        /// </summary>
        public static string Config_LanguageR2Info {
            get {
                return ResourceManager.GetString("Config_LanguageR2Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock to screen resolution.
        /// </summary>
        public static string Config_LockRes {
            get {
                return ResourceManager.GetString("Config_LockRes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locks the horizontal and vertical values to the ones of the current screen resolution.
        /// </summary>
        public static string Config_LockResInfo {
            get {
                return ResourceManager.GetString("Config_LockResInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network.
        /// </summary>
        public static string Config_Network {
            get {
                return ResourceManager.GetString("Config_Network", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolution.
        /// </summary>
        public static string Config_Resolution {
            get {
                return ResourceManager.GetString("Config_Resolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The horizontal screen resolution.
        /// </summary>
        public static string Config_ResolutionHorizontalInfo {
            get {
                return ResourceManager.GetString("Config_ResolutionHorizontalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the widescreen support is not enabled the game will stretch if set to an aspect ratio other than 4:3.
        /// </summary>
        public static string Config_ResolutionR2Info {
            get {
                return ResourceManager.GetString("Config_ResolutionR2Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting the resolution to an aspect ratio other than 4:3 will stretch the game, even with the internal widescreen option turned on.
        /// </summary>
        public static string Config_ResolutionRRRInfo {
            get {
                return ResourceManager.GetString("Config_ResolutionRRRInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The vertical screen resolution.
        /// </summary>
        public static string Config_ResolutionVerticalInfo {
            get {
                return ResourceManager.GetString("Config_ResolutionVerticalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Screen Mode.
        /// </summary>
        public static string Config_RRRScreenMode {
            get {
                return ResourceManager.GetString("Config_RRRScreenMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 16:9.
        /// </summary>
        public static string Config_RRRScreenMode_16_9 {
            get {
                return ResourceManager.GetString("Config_RRRScreenMode_16_9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4:3.
        /// </summary>
        public static string Config_RRRScreenMode_4_3 {
            get {
                return ResourceManager.GetString("Config_RRRScreenMode_4_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4:3 borders.
        /// </summary>
        public static string Config_RRRScreenMode_4_3Borders {
            get {
                return ResourceManager.GetString("Config_RRRScreenMode_4_3Borders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The screen mode options will behave differently depending on the selected resolution. Usually keeping the 4:3 mode enabled will allow the game not to be stretched on different aspect ratios..
        /// </summary>
        public static string Config_RRRScreenModeInfo {
            get {
                return ResourceManager.GetString("Config_RRRScreenModeInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Data Location.
        /// </summary>
        public static string Config_SaveDataLocation {
            get {
                return ResourceManager.GetString("Config_SaveDataLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to App data.
        /// </summary>
        public static string Config_SaveDataLocationAppData {
            get {
                return ResourceManager.GetString("Config_SaveDataLocationAppData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will not change where the game saves its data. Use this only to specify the data location for the backup tool..
        /// </summary>
        public static string Config_SaveDataLocationInfo {
            get {
                return ResourceManager.GetString("Config_SaveDataLocationInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install directory.
        /// </summary>
        public static string Config_SaveDataLocationInstDir {
            get {
                return ResourceManager.GetString("Config_SaveDataLocationInstDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when saving your {0} configuration.
        /// </summary>
        public static string Config_SaveError {
            get {
                return ResourceManager.GetString("Config_SaveError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error saving.
        /// </summary>
        public static string Config_SaveErrorHeader {
            get {
                return ResourceManager.GetString("Config_SaveErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when saving your Rayman Raving Rabbids configuration.
        /// </summary>
        public static string Config_SaveRRRError {
            get {
                return ResourceManager.GetString("Config_SaveRRRError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your changes have been saved.
        /// </summary>
        public static string Config_SaveSuccess {
            get {
                return ResourceManager.GetString("Config_SaveSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when saving. Not all changes have been saved..
        /// </summary>
        public static string Config_SaveWarning {
            get {
                return ResourceManager.GetString("Config_SaveWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static Shadows.
        /// </summary>
        public static string Config_StaticShadows {
            get {
                return ResourceManager.GetString("Config_StaticShadows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Textures.
        /// </summary>
        public static string Config_Textures {
            get {
                return ResourceManager.GetString("Config_Textures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 16 bit.
        /// </summary>
        public static string Config_Textures16 {
            get {
                return ResourceManager.GetString("Config_Textures16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 32 bit.
        /// </summary>
        public static string Config_Textures32 {
            get {
                return ResourceManager.GetString("Config_Textures32", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transform and Lightning.
        /// </summary>
        public static string Config_TnL {
            get {
                return ResourceManager.GetString("Config_TnL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uncheck this if there are graphical glitches in the game.
        /// </summary>
        public static string Config_TnLInfo {
            get {
                return ResourceManager.GetString("Config_TnLInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TriLinear.
        /// </summary>
        public static string Config_TriLinear {
            get {
                return ResourceManager.GetString("Config_TriLinear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use connected controller.
        /// </summary>
        public static string Config_UseController {
            get {
                return ResourceManager.GetString("Config_UseController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical widescreen.
        /// </summary>
        public static string Config_VerticalHorizontal {
            get {
                return ResourceManager.GetString("Config_VerticalHorizontal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Video.
        /// </summary>
        public static string Config_Video {
            get {
                return ResourceManager.GetString("Config_Video", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 16 bits per pixel.
        /// </summary>
        public static string Config_Video16Bpp {
            get {
                return ResourceManager.GetString("Config_Video16Bpp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 32 bits per pixel.
        /// </summary>
        public static string Config_Video32Bpp {
            get {
                return ResourceManager.GetString("Config_Video32Bpp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto adjust quality.
        /// </summary>
        public static string Config_VideoAuto {
            get {
                return ResourceManager.GetString("Config_VideoAuto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad quality.
        /// </summary>
        public static string Config_VideoBad {
            get {
                return ResourceManager.GetString("Config_VideoBad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Good quality.
        /// </summary>
        public static string Config_VideoGood {
            get {
                return ResourceManager.GetString("Config_VideoGood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Horizontal widescreen.
        /// </summary>
        public static string Config_WidescreenHorizontal {
            get {
                return ResourceManager.GetString("Config_WidescreenHorizontal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make the widescreen expand horizontally.
        /// </summary>
        public static string Config_WidescreenHorizontalInfo {
            get {
                return ResourceManager.GetString("Config_WidescreenHorizontalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Widescreen support.
        /// </summary>
        public static string Config_WidescreenSupport {
            get {
                return ResourceManager.GetString("Config_WidescreenSupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Widescreen support ensures that the game is not stretched when running in an aspect ratio other than 4:3.
        /// </summary>
        public static string Config_WidescreenSupportInfo {
            get {
                return ResourceManager.GetString("Config_WidescreenSupportInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make the widescreen shrink vertically.
        /// </summary>
        public static string Config_WidescreenVerticalInfo {
            get {
                return ResourceManager.GetString("Config_WidescreenVerticalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Continue.
        /// </summary>
        public static string Continue {
            get {
                return ResourceManager.GetString("Continue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string DebugPageHeader {
            get {
                return ResourceManager.GetString("DebugPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured when setting up the additional required files. Certain features of the program might not function like intended. It is recommended to attempt to restart the program.&quot;.
        /// </summary>
        public static string DeployFilesError {
            get {
                return ResourceManager.GetString("DeployFilesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The available languages may vary between releases.
        /// </summary>
        public static string DosBoxConfig_LanguageInfo {
            get {
                return ResourceManager.GetString("DosBoxConfig_LanguageInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The language could not be updated.
        /// </summary>
        public static string DosBoxConfig_SetLanguageError {
            get {
                return ResourceManager.GetString("DosBoxConfig_SetLanguageError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error updating language.
        /// </summary>
        public static string DosBoxConfig_SetLanguageErrorHeader {
            get {
                return ResourceManager.GetString("DosBoxConfig_SetLanguageErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cycles value is not in a valid format.
        /// </summary>
        public static string DosBoxCyclesValidation_InvalidFormat {
            get {
                return ResourceManager.GetString("DosBoxCyclesValidation_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only digits are allowed when using a specified value.
        /// </summary>
        public static string DosBoxCyclesValidation_NonDigit {
            get {
                return ResourceManager.GetString("DosBoxCyclesValidation_NonDigit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cycles value can not be empty.
        /// </summary>
        public static string DosBoxCyclesValidation_NullOrEmpty {
            get {
                return ResourceManager.GetString("DosBoxCyclesValidation_NullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aspect ratio correction.
        /// </summary>
        public static string DosBoxOptions_AspectCorrection {
            get {
                return ResourceManager.GetString("DosBoxOptions_AspectCorrection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do aspect correction, if your output method doesn&apos;t support scaling this can slow things down!.
        /// </summary>
        public static string DosBoxOptions_AspectCorrectionInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_AspectCorrectionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox commands.
        /// </summary>
        public static string DosBoxOptions_Commands {
            get {
                return ResourceManager.GetString("DosBoxOptions_Commands", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Optional).
        /// </summary>
        public static string DosBoxOptions_CommandsOptional {
            get {
                return ResourceManager.GetString("DosBoxOptions_CommandsOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Core.
        /// </summary>
        public static string DosBoxOptions_Core {
            get {
                return ResourceManager.GetString("DosBoxOptions_Core", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CPU Core used in emulation. Auto switches from normal to dynamic if appropriate..
        /// </summary>
        public static string DosBoxOptions_CoreInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_CoreInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cycles.
        /// </summary>
        public static string DosBoxOptions_Cycles {
            get {
                return ResourceManager.GetString("DosBoxOptions_Cycles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of instructions DOSBox tries to emulate each millisecond. Setting this value too high results in sound dropouts and lags. You can also let DOSBox guess the correct value by setting it to max. The default setting (auto) switches to max if appropriate..
        /// </summary>
        public static string DosBoxOptions_CyclesInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_CyclesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Frameskip.
        /// </summary>
        public static string DosBoxOptions_Frameskip {
            get {
                return ResourceManager.GetString("DosBoxOptions_Frameskip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many frames DOSBox skips before drawing one.
        /// </summary>
        public static string DosBoxOptions_FrameskipInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FrameskipInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen.
        /// </summary>
        public static string DosBoxOptions_Fullscreeen {
            get {
                return ResourceManager.GetString("DosBoxOptions_Fullscreeen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start DOSBox directly in fullscreen.
        /// </summary>
        public static string DosBoxOptions_FullscreeenInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreeenInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen double buffering.
        /// </summary>
        public static string DosBoxOptions_FullscreenDubbleBuffering {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenDubbleBuffering", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use double buffering in fullscreen.
        /// </summary>
        public static string DosBoxOptions_FullscreenDubbleBufferingInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenDubbleBufferingInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen resolution.
        /// </summary>
        public static string DosBoxOptions_FullscreenRes {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenRes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What resolution to use for fullscreen: original or fixed size (e.g. 1024x768).
        /// </summary>
        public static string DosBoxOptions_FullscreenResInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenResInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Memory Size.
        /// </summary>
        public static string DosBoxOptions_MemorySize {
            get {
                return ResourceManager.GetString("DosBoxOptions_MemorySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of memory DOSBox has in megabytes.
        /// </summary>
        public static string DosBoxOptions_MemorySizeInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_MemorySizeInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output.
        /// </summary>
        public static string DosBoxOptions_Output {
            get {
                return ResourceManager.GetString("DosBoxOptions_Output", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What to use for output.
        /// </summary>
        public static string DosBoxOptions_OutputInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_OutputInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use recommended settings.
        /// </summary>
        public static string DosBoxOptions_Recommended {
            get {
                return ResourceManager.GetString("DosBoxOptions_Recommended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scaler.
        /// </summary>
        public static string DosBoxOptions_Scaler {
            get {
                return ResourceManager.GetString("DosBoxOptions_Scaler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scaler used to enlarge/enhance low resolution modes.
        /// </summary>
        public static string DosBoxOptions_ScalerInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_ScalerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windowed resolution.
        /// </summary>
        public static string DosBoxOptions_WindowedRes {
            get {
                return ResourceManager.GetString("DosBoxOptions_WindowedRes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scale the window to this size IF the output device supports hardware scaling.
        /// </summary>
        public static string DosBoxOptions_WindowedResInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_WindowedResInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The character &apos;{0}&apos; is not valid.
        /// </summary>
        public static string DosBoxResolutionValidation_InvalidCharacter {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_InvalidCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid format.
        /// </summary>
        public static string DosBoxResolutionValidation_InvalidFormat {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A valid height must be specified.
        /// </summary>
        public static string DosBoxResolutionValidation_InvalidHeight {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_InvalidHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resolution separator &apos;x&apos; must be used.
        /// </summary>
        public static string DosBoxResolutionValidation_MissingSeparator {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_MissingSeparator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resolution separator &apos;x&apos; can only be used once.
        /// </summary>
        public static string DosBoxResolutionValidation_MultipleSeparators {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_MultipleSeparators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resolution value can not be empty.
        /// </summary>
        public static string DosBoxResolutionValidation_NullOrEmpty {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_NullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox Settings.
        /// </summary>
        public static string DosBoxSettingsHeader {
            get {
                return ResourceManager.GetString("DosBoxSettingsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting one of the below options to disabled or empty will use the default value specified in the DosBox configuration file. If a specific configuration file has been specified in the settings it may overwrite some of the settings below..
        /// </summary>
        public static string DosBoxSettingsInfo {
            get {
                return ResourceManager.GetString("DosBoxSettingsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are using an older version of the program ({0}) compared to the version of the current app data ({1}). This is not recommended and may cause compatibility issues. These may be fixed by resetting the app data for this program..
        /// </summary>
        public static string DowngradeWarning {
            get {
                return ResourceManager.GetString("DowngradeWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downgrade detected.
        /// </summary>
        public static string DowngradeWarningHeader {
            get {
                return ResourceManager.GetString("DowngradeWarningHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you wish to cancel the download?.
        /// </summary>
        public static string Download_Cancel {
            get {
                return ResourceManager.GetString("Download_Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The download operation was canceled.
        /// </summary>
        public static string Download_Canceled {
            get {
                return ResourceManager.GetString("Download_Canceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation canceled.
        /// </summary>
        public static string Download_CanceledHeader {
            get {
                return ResourceManager.GetString("Download_CanceledHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel ongoing download.
        /// </summary>
        public static string Download_CancelHeader {
            get {
                return ResourceManager.GetString("Download_CancelHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This patch requires its files to be downloaded. Continue?.
        /// </summary>
        public static string Download_Confirm {
            get {
                return ResourceManager.GetString("Download_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm download.
        /// </summary>
        public static string Download_ConfirmHeader {
            get {
                return ResourceManager.GetString("Download_ConfirmHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This patch requires its files to be downloaded. The total size of the download is {0}. Continue?.
        /// </summary>
        public static string Download_ConfirmSize {
            get {
                return ResourceManager.GetString("Download_ConfirmSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current File Progress.
        /// </summary>
        public static string Download_CurrentFileProgress {
            get {
                return ResourceManager.GetString("Download_CurrentFileProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The files could not be downloaded.
        /// </summary>
        public static string Download_Error {
            get {
                return ResourceManager.GetString("Download_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The download operation failed.
        /// </summary>
        public static string Download_Failed {
            get {
                return ResourceManager.GetString("Download_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation failed.
        /// </summary>
        public static string Download_FailedHeader {
            get {
                return ResourceManager.GetString("Download_FailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No files were found to download.
        /// </summary>
        public static string Download_NoFilesFound {
            get {
                return ResourceManager.GetString("Download_NoFilesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is currently canceling.
        /// </summary>
        public static string Download_OperationCanceling {
            get {
                return ResourceManager.GetString("Download_OperationCanceling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel request already received.
        /// </summary>
        public static string Download_OperationCancelingHeader {
            get {
                return ResourceManager.GetString("Download_OperationCancelingHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some files could not be restored. Check {0} &amp; {1} to recover lost files..
        /// </summary>
        public static string Download_RestoreStoppedDownloadError {
            get {
                return ResourceManager.GetString("Download_RestoreStoppedDownloadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The files were downloaded successfully.
        /// </summary>
        public static string Download_Success {
            get {
                return ResourceManager.GetString("Download_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download operation complete.
        /// </summary>
        public static string Download_SuccessHeader {
            get {
                return ResourceManager.GetString("Download_SuccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download.
        /// </summary>
        public static string Download_Title {
            get {
                return ResourceManager.GetString("Download_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Total Progress.
        /// </summary>
        public static string Download_TotalProgress {
            get {
                return ResourceManager.GetString("Download_TotalProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception.
        /// </summary>
        public static string ExceptionMessageHeader {
            get {
                return ResourceManager.GetString("ExceptionMessageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception has occurred in the application. Below is the available debug information for the current user level in the Carrot Framework..
        /// </summary>
        public static string ExceptionMessageInfo {
            get {
                return ResourceManager.GetString("ExceptionMessageInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default.
        /// </summary>
        public static string FiestaRunVersion_Default {
            get {
                return ResourceManager.GetString("FiestaRunVersion_Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preload Edition.
        /// </summary>
        public static string FiestaRunVersion_Preload {
            get {
                return ResourceManager.GetString("FiestaRunVersion_Preload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows 10 Edition.
        /// </summary>
        public static string FiestaRunVersion_Win10 {
            get {
                return ResourceManager.GetString("FiestaRunVersion_Win10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred creating the shortcut.
        /// </summary>
        public static string File_CreatingShortcutError {
            get {
                return ResourceManager.GetString("File_CreatingShortcutError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error creating shortcut.
        /// </summary>
        public static string File_CreatingShortcutErrorHeader {
            get {
                return ResourceManager.GetString("File_CreatingShortcutErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when attempting to run {0}.
        /// </summary>
        public static string File_ErrorLaunchingFile {
            get {
                return ResourceManager.GetString("File_ErrorLaunchingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file could not be found: {0}.
        /// </summary>
        public static string File_FileNotFound {
            get {
                return ResourceManager.GetString("File_FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found.
        /// </summary>
        public static string File_FileNotFoundHeader {
            get {
                return ResourceManager.GetString("File_FileNotFoundHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location not found.
        /// </summary>
        public static string File_LocationNotFound {
            get {
                return ResourceManager.GetString("File_LocationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory could not be opened.
        /// </summary>
        public static string File_OpenLocationError {
            get {
                return ResourceManager.GetString("File_OpenLocationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory error.
        /// </summary>
        public static string File_OpenLocationErrorHeader {
            get {
                return ResourceManager.GetString("File_OpenLocationErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key could not be opened.
        /// </summary>
        public static string File_OpenRegKeyError {
            get {
                return ResourceManager.GetString("File_OpenRegKeyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error opening key.
        /// </summary>
        public static string File_OpenRegKeyErrorHeader {
            get {
                return ResourceManager.GetString("File_OpenRegKeyErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The registry key was not found.
        /// </summary>
        public static string File_RegKeyNotFound {
            get {
                return ResourceManager.GetString("File_RegKeyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registry key not found.
        /// </summary>
        public static string File_RegKeyNotFoundHeader {
            get {
                return ResourceManager.GetString("File_RegKeyNotFoundHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shortcut created successfully.
        /// </summary>
        public static string File_ShortcutCreated {
            get {
                return ResourceManager.GetString("File_ShortcutCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Welcome to the Rayman Control Panel.
        /// </summary>
        public static string FirstLaunchInfo_Header {
            get {
                return ResourceManager.GetString("FirstLaunchInfo_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This program allows quick and easy access to all your installed Rayman games on your computer. From here you&apos;ll be able to launch them and their configuration programs, configure them directly from this program with added options (such as button mapping, widescreen support and more) and backup/restore each game&apos;s save files.
        ///Missing any Rayman games on your computer? You can easily access the available digital shops to purchase them or use the disc installer to install from any disc.
        ///To get started, check [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FirstLaunchInfo_Text {
            get {
                return ResourceManager.GetString("FirstLaunchInfo_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Welcome to the Rayman Control Panel.
        /// </summary>
        public static string FirstLaunchInfo_Title {
            get {
                return ResourceManager.GetString("FirstLaunchInfo_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install from disc.
        /// </summary>
        public static string GameDisplay_DiscInstall {
            get {
                return ResourceManager.GetString("GameDisplay_DiscInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch.
        /// </summary>
        public static string GameDisplay_Launch {
            get {
                return ResourceManager.GetString("GameDisplay_Launch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locate.
        /// </summary>
        public static string GameDisplay_Locate {
            get {
                return ResourceManager.GetString("GameDisplay_Locate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open location.
        /// </summary>
        public static string GameDisplay_OpenLocation {
            get {
                return ResourceManager.GetString("GameDisplay_OpenLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open community page.
        /// </summary>
        public static string GameDisplay_OpenSteamCommunity {
            get {
                return ResourceManager.GetString("GameDisplay_OpenSteamCommunity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open store page.
        /// </summary>
        public static string GameDisplay_OpenSteamStore {
            get {
                return ResourceManager.GetString("GameDisplay_OpenSteamStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options.
        /// </summary>
        public static string GameDisplay_Options {
            get {
                return ResourceManager.GetString("GameDisplay_Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purchase from GOG.
        /// </summary>
        public static string GameDisplay_PurchaseGOG {
            get {
                return ResourceManager.GetString("GameDisplay_PurchaseGOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purchase from Uplay.
        /// </summary>
        public static string GameDisplay_PurchaseUplay {
            get {
                return ResourceManager.GetString("GameDisplay_PurchaseUplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purchase from Windows Store.
        /// </summary>
        public static string GameDisplay_PurchaseWinStore {
            get {
                return ResourceManager.GetString("GameDisplay_PurchaseWinStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run as Admin.
        /// </summary>
        public static string GameDisplay_RunAsAdmin {
            get {
                return ResourceManager.GetString("GameDisplay_RunAsAdmin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purchase from Steam.
        /// </summary>
        public static string GameDisplay_Steam {
            get {
                return ResourceManager.GetString("GameDisplay_Steam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred during the game finder operation.
        /// </summary>
        public static string GameFinder_Error {
            get {
                return ResourceManager.GetString("GameFinder_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following new games were found:.
        /// </summary>
        public static string GameFinder_GamesFound {
            get {
                return ResourceManager.GetString("GameFinder_GamesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed games found.
        /// </summary>
        public static string GameFinder_GamesFoundHeader {
            get {
                return ResourceManager.GetString("GameFinder_GamesFoundHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game type:.
        /// </summary>
        public static string GameInfo_GameType {
            get {
                return ResourceManager.GetString("GameInfo_GameType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install location:.
        /// </summary>
        public static string GameInfo_InstallDir {
            get {
                return ResourceManager.GetString("GameInfo_InstallDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch arguments:.
        /// </summary>
        public static string GameInfo_LaunchArgs {
            get {
                return ResourceManager.GetString("GameInfo_LaunchArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch path:.
        /// </summary>
        public static string GameInfo_LaunchPath {
            get {
                return ResourceManager.GetString("GameInfo_LaunchPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam ID:.
        /// </summary>
        public static string GameInfo_SteamID {
            get {
                return ResourceManager.GetString("GameInfo_SteamID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Architecture.
        /// </summary>
        public static string GameInfo_WinStoreArchitecture {
            get {
                return ResourceManager.GetString("GameInfo_WinStoreArchitecture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependencies.
        /// </summary>
        public static string GameInfo_WinStoreDependencies {
            get {
                return ResourceManager.GetString("GameInfo_WinStoreDependencies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Full name.
        /// </summary>
        public static string GameInfo_WinStoreFullName {
            get {
                return ResourceManager.GetString("GameInfo_WinStoreFullName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed.
        /// </summary>
        public static string GameInfo_WinStoreInstallDate {
            get {
                return ResourceManager.GetString("GameInfo_WinStoreInstallDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version.
        /// </summary>
        public static string GameInfo_WinStoreVersion {
            get {
                return ResourceManager.GetString("GameInfo_WinStoreVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dgVoodoo.
        /// </summary>
        public static string GameLink_R2dgVoodoo {
            get {
                return ResourceManager.GetString("GameLink_R2dgVoodoo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nGlide config.
        /// </summary>
        public static string GameLink_R2nGlide {
            get {
                return ResourceManager.GetString("GameLink_R2nGlide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapper.
        /// </summary>
        public static string GameLink_RDMapper {
            get {
                return ResourceManager.GetString("GameLink_RDMapper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setup.
        /// </summary>
        public static string GameLink_Setup {
            get {
                return ResourceManager.GetString("GameLink_Setup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game {0} was not found.
        /// </summary>
        public static string GameNotFound {
            get {
                return ResourceManager.GetString("GameNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find game.
        /// </summary>
        public static string GameNotFoundHeader {
            get {
                return ResourceManager.GetString("GameNotFoundHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration.
        /// </summary>
        public static string GameOptions_Config {
            get {
                return ResourceManager.GetString("GameOptions_Config", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create shortcut.
        /// </summary>
        public static string GameOptions_CreateShortcut {
            get {
                return ResourceManager.GetString("GameOptions_CreateShortcut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch Mode.
        /// </summary>
        public static string GameOptions_LaunchMode {
            get {
                return ResourceManager.GetString("GameOptions_LaunchMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As administrator.
        /// </summary>
        public static string GameOptions_LaunchMode_AsAdmin {
            get {
                return ResourceManager.GetString("GameOptions_LaunchMode_AsAdmin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always attempts to run the game as administrator.
        /// </summary>
        public static string GameOptions_LaunchMode_AsAdminInfo {
            get {
                return ResourceManager.GetString("GameOptions_LaunchMode_AsAdminInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As administrator (optional).
        /// </summary>
        public static string GameOptions_LaunchMode_AsAdminOption {
            get {
                return ResourceManager.GetString("GameOptions_LaunchMode_AsAdminOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Same as Default, but with the option to run the game as administrator.
        /// </summary>
        public static string GameOptions_LaunchMode_AsAdminOptionInfo {
            get {
                return ResourceManager.GetString("GameOptions_LaunchMode_AsAdminOptionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default.
        /// </summary>
        public static string GameOptions_LaunchMode_AsInvoker {
            get {
                return ResourceManager.GetString("GameOptions_LaunchMode_AsInvoker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always runs the game with the same permissions as the Rayman Control Panel was launched with.
        /// </summary>
        public static string GameOptions_LaunchMode_AsInvokerInfo {
            get {
                return ResourceManager.GetString("GameOptions_LaunchMode_AsInvokerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This determines how the game will be launched. If the game is running inside of an emulator, such as DOSBox, then the launch mode will apply to the emulator..
        /// </summary>
        public static string GameOptions_LaunchModeInfo {
            get {
                return ResourceManager.GetString("GameOptions_LaunchModeInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options.
        /// </summary>
        public static string GameOptions_Options {
            get {
                return ResourceManager.GetString("GameOptions_Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove from program.
        /// </summary>
        public static string GameOptions_Remove {
            get {
                return ResourceManager.GetString("GameOptions_Remove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your configuration changes have not been saved. Do you want to exit and discard them?.
        /// </summary>
        public static string GameOptions_UnsavedChanges {
            get {
                return ResourceManager.GetString("GameOptions_UnsavedChanges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm exit.
        /// </summary>
        public static string GameOptions_UnsavedChangesHeader {
            get {
                return ResourceManager.GetString("GameOptions_UnsavedChangesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Utilities.
        /// </summary>
        public static string GameOptions_Utilities {
            get {
                return ResourceManager.GetString("GameOptions_Utilities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed.
        /// </summary>
        public static string Games_Installed {
            get {
                return ResourceManager.GetString("Games_Installed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not Installed.
        /// </summary>
        public static string Games_NotInstalled {
            get {
                return ResourceManager.GetString("Games_NotInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select shortcut destination.
        /// </summary>
        public static string GameShortcut_BrowseHeader {
            get {
                return ResourceManager.GetString("GameShortcut_BrowseHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The shortcut could not be created.
        /// </summary>
        public static string GameShortcut_Error {
            get {
                return ResourceManager.GetString("GameShortcut_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shortcut creation failed.
        /// </summary>
        public static string GameShortcut_ErrorHeader {
            get {
                return ResourceManager.GetString("GameShortcut_ErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch {0}.
        /// </summary>
        public static string GameShortcut_ShortcutName {
            get {
                return ResourceManager.GetString("GameShortcut_ShortcutName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shortcut created successfully.
        /// </summary>
        public static string GameShortcut_Success {
            get {
                return ResourceManager.GetString("GameShortcut_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Games.
        /// </summary>
        public static string GamesPageHeader {
            get {
                return ResourceManager.GetString("GamesPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Desktop Application.
        /// </summary>
        public static string GameType_Desktop {
            get {
                return ResourceManager.GetString("GameType_Desktop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox.
        /// </summary>
        public static string GameType_DosBox {
            get {
                return ResourceManager.GetString("GameType_DosBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam.
        /// </summary>
        public static string GameType_Steam {
            get {
                return ResourceManager.GetString("GameType_Steam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft Store.
        /// </summary>
        public static string GameType_WinStore {
            get {
                return ResourceManager.GetString("GameType_WinStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options.
        /// </summary>
        public static string GenericPage_Options {
            get {
                return ResourceManager.GetString("GenericPage_Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For additional help, check the Discord server.
        /// </summary>
        public static string Help_AdditionalHelp {
            get {
                return ResourceManager.GetString("Help_AdditionalHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a help page from the available categories to the left.
        /// </summary>
        public static string Help_CategoryHelp {
            get {
                return ResourceManager.GetString("Help_CategoryHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cheat Codes.
        /// </summary>
        public static string Help_Cheats {
            get {
                return ResourceManager.GetString("Help_Cheats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 1.
        /// </summary>
        public static string Help_Cheats_R1Header {
            get {
                return ResourceManager.GetString("Help_Cheats_R1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 2.
        /// </summary>
        public static string Help_Cheats_R2Header {
            get {
                return ResourceManager.GetString("Help_Cheats_R2Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 3.
        /// </summary>
        public static string Help_Cheats_R3Header {
            get {
                return ResourceManager.GetString("Help_Cheats_R3Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Designer + Spin-Offs.
        /// </summary>
        public static string Help_Cheats_RDHeader {
            get {
                return ResourceManager.GetString("Help_Cheats_RDHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman M/Arena.
        /// </summary>
        public static string Help_Cheats_RMAHeader {
            get {
                return ResourceManager.GetString("Help_Cheats_RMAHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Games.
        /// </summary>
        public static string Help_Games {
            get {
                return ResourceManager.GetString("Help_Games", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        public static string Help_Games_General {
            get {
                return ResourceManager.GetString("Help_Games_General", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Here are the two most common things to try out if a game won&apos;t launch:
        ///
        ///*Run the game as administrator:
        ///The option to run a program as administrator can be found in the context menu by right-clicking the program.
        ///
        ///*Run the game in compatibility mode:
        ///Running an application in compatibility mode is done by selecting the option under the compatibility options in the file properties. For many older games it is recommended to select Windows XP Service Pack 2 or 3..
        /// </summary>
        public static string Help_Games_General_GameNotLaunching {
            get {
                return ResourceManager.GetString("Help_Games_General_GameNotLaunching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game not Launching.
        /// </summary>
        public static string Help_Games_General_GameNotLaunchingHeader {
            get {
                return ResourceManager.GetString("Help_Games_General_GameNotLaunchingHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 1.
        /// </summary>
        public static string Help_Games_R1 {
            get {
                return ResourceManager.GetString("Help_Games_R1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 1, and most of its PC spin-offs (including Rayman Designer, Rayman by his Fans and Rayman 60 Levels) are MS-DOS programs and are not compatible with modern versions of Windows. Running them requires a DOS emulator, such as DosBox. Currently DosBox is the only supported emulator by the Rayman Control Panel..
        /// </summary>
        public static string Help_Games_R1_Emulator {
            get {
                return ResourceManager.GetString("Help_Games_R1_Emulator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MS-Dos Emulator.
        /// </summary>
        public static string Help_Games_R1_EmulatorHeader {
            get {
                return ResourceManager.GetString("Help_Games_R1_EmulatorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing maps is done in the Mapper program. If an error occurs when doing so you can try moving the map file to the RayKit directory and importing it from there..
        /// </summary>
        public static string Help_Games_R1_ImportMaps {
            get {
                return ResourceManager.GetString("Help_Games_R1_ImportMaps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing Maps.
        /// </summary>
        public static string Help_Games_R1_ImportMapsHeader {
            get {
                return ResourceManager.GetString("Help_Games_R1_ImportMapsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If one of the Rayman 1 based installers fail when it has finished installing it will delete the installed game if you cancel in the installer. To prevent this, force close the installer using task manager. The game will most likely still be installed. If any files are missing, copy them over from the disc manually..
        /// </summary>
        public static string Help_Games_R1_InstallationFailed {
            get {
                return ResourceManager.GetString("Help_Games_R1_InstallationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation Failed.
        /// </summary>
        public static string Help_Games_R1_InstallationFailedHeader {
            get {
                return ResourceManager.GetString("Help_Games_R1_InstallationFailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Designer, also known as Rayman Gold or Rayman&apos;s World, is the Rayman game which includes the Mapper program which is used to create your own levels. The Mapper is a normal Windows executable file and will run without the need of an emulator. All of the static parts of the level are created in the Mapper program, while all of the so-called &apos;events&apos; are placed in the event editor (found within the game itself)..
        /// </summary>
        public static string Help_Games_R1_Mapper {
            get {
                return ResourceManager.GetString("Help_Games_R1_Mapper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Designer Editor.
        /// </summary>
        public static string Help_Games_R1_MapperHeader {
            get {
                return ResourceManager.GetString("Help_Games_R1_MapperHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 2.
        /// </summary>
        public static string Help_Games_R2 {
            get {
                return ResourceManager.GetString("Help_Games_R2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some parts of the game may not work if the game is running in 60fps. The most notable issue is during the bonus games where the timing difference will make it nearly impossible to win. Another side effect may be not being able to jump off of Umber&apos;s head in the Sanctuary of Stone and Fire..
        /// </summary>
        public static string Help_Games_R2_Fps {
            get {
                return ResourceManager.GetString("Help_Games_R2_Fps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 60 vs 30 fps.
        /// </summary>
        public static string Help_Games_R2_FpsHeader {
            get {
                return ResourceManager.GetString("Help_Games_R2_FpsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If Rayman 2 is running too fast while using nGlide, change the refresh rate to 120hz. This should be done even on monitors which do not support 120hz..
        /// </summary>
        public static string Help_Games_R2_GameSpeed {
            get {
                return ResourceManager.GetString("Help_Games_R2_GameSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Running too Fast.
        /// </summary>
        public static string Help_Games_R2_GameSpeedHeader {
            get {
                return ResourceManager.GetString("Help_Games_R2_GameSpeedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to On disc versions of the game there is a known issue where the game will display a CD error during gameplay. This issue is not present in the GOG version. If the game is installed using the Rayman Control Panel installer the game will be patched to avoid the disc check like the GOG version, avoiding this issue entirely..
        /// </summary>
        public static string Help_Games_R2_NoDisc {
            get {
                return ResourceManager.GetString("Help_Games_R2_NoDisc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Disc Error.
        /// </summary>
        public static string Help_Games_R2_NoDiscHeader {
            get {
                return ResourceManager.GetString("Help_Games_R2_NoDiscHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 3.
        /// </summary>
        public static string Help_Games_R3 {
            get {
                return ResourceManager.GetString("Help_Games_R3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Legends.
        /// </summary>
        public static string Help_Games_RL {
            get {
                return ResourceManager.GetString("Help_Games_RL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The error occurs mainly on Windows 10 devices due to the game not being able to read/write to the game save file and/or the game configuration settings. The most common fix involves adding Rayman Legends as an exception to the Controlled Folder Access section of the built-in Windows Security system..
        /// </summary>
        public static string Help_Games_RL_LoadError {
            get {
                return ResourceManager.GetString("Help_Games_RL_LoadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error during load.
        /// </summary>
        public static string Help_Games_RL_LoadErrorHeader {
            get {
                return ResourceManager.GetString("Help_Games_RL_LoadErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman M/Arena.
        /// </summary>
        public static string Help_Games_RMA {
            get {
                return ResourceManager.GetString("Help_Games_RMA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If textures are missing in the game while using an Intel graphics card, try turning off Transform and Lightning..
        /// </summary>
        public static string Help_Games_RMA_MissingTextures {
            get {
                return ResourceManager.GetString("Help_Games_RMA_MissingTextures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing Textures.
        /// </summary>
        public static string Help_Games_RMA_MissingTexturesHeader {
            get {
                return ResourceManager.GetString("Help_Games_RMA_MissingTexturesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Raving Rabbids.
        /// </summary>
        public static string Help_Games_RRR {
            get {
                return ResourceManager.GetString("Help_Games_RRR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is currently no fix for this error. This appears in all versions, including the GOG version, on certain computers..
        /// </summary>
        public static string Help_Games_RRR_EngineError {
            get {
                return ResourceManager.GetString("Help_Games_RRR_EngineError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to jade_enr.exe Error.
        /// </summary>
        public static string Help_Games_RRR_EngineErrorHeader {
            get {
                return ResourceManager.GetString("Help_Games_RRR_EngineErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Control Panel.
        /// </summary>
        public static string Help_RCP {
            get {
                return ResourceManager.GetString("Help_RCP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The program saves its app data mainly in the current user&apos;s local app data directory, with some settings stored in the Registry. Below is a complete list of the locations where data is stored.
        ///
        ///• Main application data - {0}
        ///• Registry Settings - {1}
        ///• Framework Registry Settings - {2}.
        /// </summary>
        public static string Help_RCP_AppData {
            get {
                return ResourceManager.GetString("Help_RCP_AppData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to App Data Location.
        /// </summary>
        public static string Help_RCP_AppDataHeader {
            get {
                return ResourceManager.GetString("Help_RCP_AppDataHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The program has a backup and restore feature for all supported games. The backups are stored in the documents folder by default, but the location can be changed in the settings.
        ///
        ///The backups themselves are always stored in the &apos;{0}&apos; sub-directory. It is not recommended to manually modify these files..
        /// </summary>
        public static string Help_RCP_BackupRestore {
            get {
                return ResourceManager.GetString("Help_RCP_BackupRestore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup/Restore.
        /// </summary>
        public static string Help_RCP_BackupRestoreHeader {
            get {
                return ResourceManager.GetString("Help_RCP_BackupRestoreHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum required version to run the program is Windows Vista, with Windows 7 or above being recommended..
        /// </summary>
        public static string Help_RCP_Compatibility {
            get {
                return ResourceManager.GetString("Help_RCP_Compatibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compatibility.
        /// </summary>
        public static string Help_RCP_CompatibilityHeader {
            get {
                return ResourceManager.GetString("Help_RCP_CompatibilityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If a debugger is attached to the program the log viewer will automatically open. This can manually be opened from the debug page even without a debugger being attached. If the debug user level is not enabled, the log can still be viewed from the file it writes to under the following path:
        ///{0}.
        /// </summary>
        public static string Help_RCP_Debug {
            get {
                return ResourceManager.GetString("Help_RCP_Debug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugging.
        /// </summary>
        public static string Help_RCP_DebugHeader {
            get {
                return ResourceManager.GetString("Help_RCP_DebugHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For games which support to be installed from a disc you can do so from the drop down menu of the game. Currently Rayman 2, Rayman M and Rayman Arena are the only supported games.
        ///
        ///During the installation you will have to specify a directory to install to. The game will install in a sub-directory in the specified directory. For example, you choose to install Rayman 2 under C:\Ubisoft it will get installed under C:\Ubisoft\Rayman 2
        ///
        ///For Rayman 2 the installer will replace the executable file with the one  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Help_RCP_GameInstaller {
            get {
                return ResourceManager.GetString("Help_RCP_GameInstaller", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game Installer.
        /// </summary>
        public static string Help_RCP_GameInstallerHeader {
            get {
                return ResourceManager.GetString("Help_RCP_GameInstallerHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Rayman Control Panel supports several launch arguments, mainly meant for debugging the application. Below is a complete list of the available launch arguments. The &apos;-&apos; character should always be included. The &apos;{}&apos; characters show that a custom variable can be used, in which case the &apos;{}&apos; should not be included.
        ///
        ///-reset (Resets all app data before launch)
        ///-install {filePath} (Removes the installer from the specified path - no longer used as of version 4.5.0)
        ///-ul {userLevel} (sets the user level once  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Help_RCP_LaunchArgs {
            get {
                return ResourceManager.GetString("Help_RCP_LaunchArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch Arguments.
        /// </summary>
        public static string Help_RCP_LaunchArgsHeader {
            get {
                return ResourceManager.GetString("Help_RCP_LaunchArgsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The program will by default check for updates on launch, unless the option has been disabled. This is done in the background and might take a few seconds. Updates can manually be checked for in the settings page.
        ///
        ///If an error occurs with the update service it can manually be downloaded from:
        ///{0}.
        /// </summary>
        public static string Help_RCP_Updates {
            get {
                return ResourceManager.GetString("Help_RCP_Updates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updates.
        /// </summary>
        public static string Help_RCP_UpdatesHeader {
            get {
                return ResourceManager.GetString("Help_RCP_UpdatesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help.
        /// </summary>
        public static string HelpPageHeader {
            get {
                return ResourceManager.GetString("HelpPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select disc to install from.
        /// </summary>
        public static string Installer_BrowseDiscHeader {
            get {
                return ResourceManager.GetString("Installer_BrowseDiscHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string Installer_Cancel {
            get {
                return ResourceManager.GetString("Installer_Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is currently canceling.
        /// </summary>
        public static string Installer_CancelAlreadyRequested {
            get {
                return ResourceManager.GetString("Installer_CancelAlreadyRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel request already received.
        /// </summary>
        public static string Installer_CancelAlreadyRequestedHeader {
            get {
                return ResourceManager.GetString("Installer_CancelAlreadyRequestedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation canceled.
        /// </summary>
        public static string Installer_Canceled {
            get {
                return ResourceManager.GetString("Installer_Canceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you wish to cancel the installation?.
        /// </summary>
        public static string Installer_CancelQuestion {
            get {
                return ResourceManager.GetString("Installer_CancelQuestion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel ongoing installation.
        /// </summary>
        public static string Installer_CancelQuestionHeader {
            get {
                return ResourceManager.GetString("Installer_CancelQuestionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Part of the installation could not be cleaned up under {0}.
        /// </summary>
        public static string Installer_CleanupError {
            get {
                return ResourceManager.GetString("Installer_CleanupError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create desktop shortcut.
        /// </summary>
        public static string Installer_CreateDesktopShortcut {
            get {
                return ResourceManager.GetString("Installer_CreateDesktopShortcut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create start menu shortcut.
        /// </summary>
        public static string Installer_CreateStartMenuShortcut {
            get {
                return ResourceManager.GetString("Installer_CreateStartMenuShortcut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current File Progress.
        /// </summary>
        public static string Installer_CurrentProgress {
            get {
                return ResourceManager.GetString("Installer_CurrentProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access was denied to the selected install location. Select another location or run the program as administrator..
        /// </summary>
        public static string Installer_DirMissingWritePermission {
            get {
                return ResourceManager.GetString("Installer_DirMissingWritePermission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access denied.
        /// </summary>
        public static string Installer_DirMissingWritePermissionHeader {
            get {
                return ResourceManager.GetString("Installer_DirMissingWritePermissionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected disc has the same label and root path as a previously inserted one. Due to this the installer can not differentiate them. Please rename one of the discs and try again, or mount them as different root directories..
        /// </summary>
        public static string Installer_DriveNameConflict {
            get {
                return ResourceManager.GetString("Installer_DriveNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disc conflict.
        /// </summary>
        public static string Installer_DriveNameConflictHeader {
            get {
                return ResourceManager.GetString("Installer_DriveNameConflictHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation failed.
        /// </summary>
        public static string Installer_Failed {
            get {
                return ResourceManager.GetString("Installer_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action failed.
        /// </summary>
        public static string Installer_FailedHeader {
            get {
                return ResourceManager.GetString("Installer_FailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were {0} file conflicts with the selected directory. Do you wish to overwrite these files?.
        /// </summary>
        public static string Installer_FileConflicts {
            get {
                return ResourceManager.GetString("Installer_FileConflicts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Conflicts.
        /// </summary>
        public static string Installer_FileConflictsHeader {
            get {
                return ResourceManager.GetString("Installer_FileConflictsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file {0} failed to copy over with the error message: {1}
        ///
        ///Try again?.
        /// </summary>
        public static string Installer_FileCopyError {
            get {
                return ResourceManager.GetString("Installer_FileCopyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to copy item to destination.
        /// </summary>
        public static string Installer_FileCopyErrorHeader {
            get {
                return ResourceManager.GetString("Installer_FileCopyErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please insert &quot;{0}&quot; to port {1} and continue, or cancel to cancel the installation.
        /// </summary>
        public static string Installer_InsertDriveRequest {
            get {
                return ResourceManager.GetString("Installer_InsertDriveRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert Disc.
        /// </summary>
        public static string Installer_InsertDriveRequestHeader {
            get {
                return ResourceManager.GetString("Installer_InsertDriveRequestHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        public static string Installer_Install {
            get {
                return ResourceManager.GetString("Installer_Install", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install for all users.
        /// </summary>
        public static string Installer_InstallAllUsers {
            get {
                return ResourceManager.GetString("Installer_InstallAllUsers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to run the program as administrator in order to install for all users.
        /// </summary>
        public static string Installer_InstallAllUsersError {
            get {
                return ResourceManager.GetString("Installer_InstallAllUsersError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing permissions.
        /// </summary>
        public static string Installer_InstallAllUsersErrorHeader {
            get {
                return ResourceManager.GetString("Installer_InstallAllUsersErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified directory does not exist.
        /// </summary>
        public static string Installer_InvalidDirectory {
            get {
                return ResourceManager.GetString("Installer_InvalidDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory not found.
        /// </summary>
        public static string Installer_InvalidDirectoryHeader {
            get {
                return ResourceManager.GetString("Installer_InvalidDirectoryHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} paths were not found on the specified disc. If the game requires more than one disc for installation, please insert the next one..
        /// </summary>
        public static string Installer_MissingFiles {
            get {
                return ResourceManager.GetString("Installer_MissingFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing Paths.
        /// </summary>
        public static string Installer_MissingFilesHeader {
            get {
                return ResourceManager.GetString("Installer_MissingFilesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch {0}.
        /// </summary>
        public static string Installer_ShortcutName {
            get {
                return ResourceManager.GetString("Installer_ShortcutName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation complete. Run configuration tool for {0} to set up the game..
        /// </summary>
        public static string Installer_Success {
            get {
                return ResourceManager.GetString("Installer_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation Complete.
        /// </summary>
        public static string Installer_SuccessHeader {
            get {
                return ResourceManager.GetString("Installer_SuccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Total Progress.
        /// </summary>
        public static string Installer_TotalProgress {
            get {
                return ResourceManager.GetString("Installer_TotalProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some items were not handled during the installation. Do you wish to retry handling those items?.
        /// </summary>
        public static string Installer_UnhandledItems {
            get {
                return ResourceManager.GetString("Installer_UnhandledItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unhandled Items.
        /// </summary>
        public static string Installer_UnhandledItemsHeader {
            get {
                return ResourceManager.GetString("Installer_UnhandledItemsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch {0}.
        /// </summary>
        public static string JumpListItemDescription {
            get {
                return ResourceManager.GetString("JumpListItemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Danish.
        /// </summary>
        public static string Lang_Danish {
            get {
                return ResourceManager.GetString("Lang_Danish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to English.
        /// </summary>
        public static string Lang_English {
            get {
                return ResourceManager.GetString("Lang_English", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finnish.
        /// </summary>
        public static string Lang_Finnish {
            get {
                return ResourceManager.GetString("Lang_Finnish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to French.
        /// </summary>
        public static string Lang_French {
            get {
                return ResourceManager.GetString("Lang_French", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to German.
        /// </summary>
        public static string Lang_German {
            get {
                return ResourceManager.GetString("Lang_German", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Italian.
        /// </summary>
        public static string Lang_Italian {
            get {
                return ResourceManager.GetString("Lang_Italian", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Norwegian.
        /// </summary>
        public static string Lang_Norwegian {
            get {
                return ResourceManager.GetString("Lang_Norwegian", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Spanish.
        /// </summary>
        public static string Lang_Spanish {
            get {
                return ResourceManager.GetString("Lang_Spanish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swedish.
        /// </summary>
        public static string Lang_Swedish {
            get {
                return ResourceManager.GetString("Lang_Swedish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DosBox could not be found. Specify a valid path under settings to run this game..
        /// </summary>
        public static string LaunchGame_DosBoxNotFound {
            get {
                return ResourceManager.GetString("LaunchGame_DosBoxNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mount path could not be found. Specify a valid path under the game options to run this game..
        /// </summary>
        public static string LaunchGame_MountPathNotFound {
            get {
                return ResourceManager.GetString("LaunchGame_MountPathNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when attempting to run {0}.
        /// </summary>
        public static string LaunchGame_WinStoreError {
            get {
                return ResourceManager.GetString("LaunchGame_WinStoreError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Fanpage.
        /// </summary>
        public static string Links_Community_Fanpage {
            get {
                return ResourceManager.GetString("Links_Community_Fanpage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KMG Associates - Rayman.
        /// </summary>
        public static string Links_Community_KMG {
            get {
                return ResourceManager.GetString("Links_Community_KMG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Menezis (browser version).
        /// </summary>
        public static string Links_Community_Menezis_Browser {
            get {
                return ResourceManager.GetString("Links_Community_Menezis_Browser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to raym.app.
        /// </summary>
        public static string Links_Community_raym_app {
            get {
                return ResourceManager.GetString("Links_Community_raym_app", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Central.
        /// </summary>
        public static string Links_Community_RaymanCentral {
            get {
                return ResourceManager.GetString("Links_Community_RaymanCentral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Together.
        /// </summary>
        public static string Links_Community_RaymanTogether {
            get {
                return ResourceManager.GetString("Links_Community_RaymanTogether", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raymap.
        /// </summary>
        public static string Links_Community_Raymap {
            get {
                return ResourceManager.GetString("Links_Community_Raymap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RaySaves.
        /// </summary>
        public static string Links_Community_RaySaves {
            get {
                return ResourceManager.GetString("Links_Community_RaySaves", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RayTunes.
        /// </summary>
        public static string Links_Community_RayTunes {
            get {
                return ResourceManager.GetString("Links_Community_RayTunes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RayWiki.
        /// </summary>
        public static string Links_Community_RayWiki {
            get {
                return ResourceManager.GetString("Links_Community_RayWiki", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Pirate-Community.
        /// </summary>
        public static string Links_Community_RPC {
            get {
                return ResourceManager.GetString("Links_Community_RPC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GOG.
        /// </summary>
        public static string Links_Forums_GOG {
            get {
                return ResourceManager.GetString("Links_Forums_GOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pirate-Community.
        /// </summary>
        public static string Links_Forums_RPC {
            get {
                return ResourceManager.GetString("Links_Forums_RPC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam - Rayman 2.
        /// </summary>
        public static string Links_Forums_Steam_R2 {
            get {
                return ResourceManager.GetString("Links_Forums_Steam_R2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam - Rayman Legends.
        /// </summary>
        public static string Links_Forums_Steam_RL {
            get {
                return ResourceManager.GetString("Links_Forums_Steam_RL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam - Rayman Origins.
        /// </summary>
        public static string Links_Forums_Steam_RO {
            get {
                return ResourceManager.GetString("Links_Forums_Steam_RO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam - Rayman Raving Rabbids.
        /// </summary>
        public static string Links_Forums_Steam_RRR {
            get {
                return ResourceManager.GetString("Links_Forums_Steam_RRR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ubisoft.
        /// </summary>
        public static string Links_Forums_Ubisoft {
            get {
                return ResourceManager.GetString("Links_Forums_Ubisoft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to App user data.
        /// </summary>
        public static string Links_Local_AppData {
            get {
                return ResourceManager.GetString("Links_Local_AppData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox.
        /// </summary>
        public static string Links_Local_DOSBox {
            get {
                return ResourceManager.GetString("Links_Local_DOSBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox configuration file.
        /// </summary>
        public static string Links_Local_DOSBoxConfig {
            get {
                return ResourceManager.GetString("Links_Local_DOSBoxConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GOG Galaxy.
        /// </summary>
        public static string Links_Local_GOGClient {
            get {
                return ResourceManager.GetString("Links_Local_GOGClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GOG Galaxy games.
        /// </summary>
        public static string Links_Local_GOGGames {
            get {
                return ResourceManager.GetString("Links_Local_GOGGames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log file.
        /// </summary>
        public static string Links_Local_LogFile {
            get {
                return ResourceManager.GetString("Links_Local_LogFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nGlide 2.0 settings.
        /// </summary>
        public static string Links_Local_nGlide2RegSettings {
            get {
                return ResourceManager.GetString("Links_Local_nGlide2RegSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nGlide settings.
        /// </summary>
        public static string Links_Local_nGlideRegSettings {
            get {
                return ResourceManager.GetString("Links_Local_nGlideRegSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Primary ubi.ini file.
        /// </summary>
        public static string Links_Local_PrimaryUbiIni {
            get {
                return ResourceManager.GetString("Links_Local_PrimaryUbiIni", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 2 ubi.ini file.
        /// </summary>
        public static string Links_Local_R2UbiIni {
            get {
                return ResourceManager.GetString("Links_Local_R2UbiIni", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registry app data.
        /// </summary>
        public static string Links_Local_RegAppData {
            get {
                return ResourceManager.GetString("Links_Local_RegAppData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Legends settings.
        /// </summary>
        public static string Links_Local_RLRegSettings {
            get {
                return ResourceManager.GetString("Links_Local_RLRegSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Origins settings.
        /// </summary>
        public static string Links_Local_RORegSettings {
            get {
                return ResourceManager.GetString("Links_Local_RORegSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Raving Rabbids settings.
        /// </summary>
        public static string Links_Local_RRRRegSettings {
            get {
                return ResourceManager.GetString("Links_Local_RRRRegSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secondary ubi.ini file.
        /// </summary>
        public static string Links_Local_SecondaryUbiIni {
            get {
                return ResourceManager.GetString("Links_Local_SecondaryUbiIni", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam.
        /// </summary>
        public static string Links_Local_Steam {
            get {
                return ResourceManager.GetString("Links_Local_Steam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam games.
        /// </summary>
        public static string Links_Local_SteamGames {
            get {
                return ResourceManager.GetString("Links_Local_SteamGames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Utilities directory.
        /// </summary>
        public static string Links_Local_Utilities {
            get {
                return ResourceManager.GetString("Links_Local_Utilities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The link item could not be opened due to not being found.
        /// </summary>
        public static string Links_OpenErrorNotFound {
            get {
                return ResourceManager.GetString("Links_OpenErrorNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid link address.
        /// </summary>
        public static string Links_OpenErrorNotFoundHeader {
            get {
                return ResourceManager.GetString("Links_OpenErrorNotFoundHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Better Rayman 3.
        /// </summary>
        public static string Links_Tools_BetterR3 {
            get {
                return ResourceManager.GetString("Links_Tools_BetterR3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 2 Fun Box.
        /// </summary>
        public static string Links_Tools_R2FunBox {
            get {
                return ResourceManager.GetString("Links_Tools_R2FunBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 2 GOG Moonjump.
        /// </summary>
        public static string Links_Tools_R2Moonjump {
            get {
                return ResourceManager.GetString("Links_Tools_R2Moonjump", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 2 Tools.
        /// </summary>
        public static string Links_Tools_R2Tools {
            get {
                return ResourceManager.GetString("Links_Tools_R2Tools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman 3 (Dolphin Emulator) HD Texture Pack.
        /// </summary>
        public static string Links_Tools_R3GCTexturePack {
            get {
                return ResourceManager.GetString("Links_Tools_R3GCTexturePack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Plus.
        /// </summary>
        public static string Links_Tools_RayPlus {
            get {
                return ResourceManager.GetString("Links_Tools_RayPlus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RayTwol.
        /// </summary>
        public static string Links_Tools_RayTwol {
            get {
                return ResourceManager.GetString("Links_Tools_RayTwol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extended Rayman Designer editor.
        /// </summary>
        public static string Links_Tools_RDEditor {
            get {
                return ResourceManager.GetString("Links_Tools_RDEditor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Community.
        /// </summary>
        public static string LinksPage_CommunityHeader {
            get {
                return ResourceManager.GetString("LinksPage_CommunityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forums.
        /// </summary>
        public static string LinksPage_ForumsHeader {
            get {
                return ResourceManager.GetString("LinksPage_ForumsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Left.
        /// </summary>
        public static string LinksPage_LinkAlignmentStyle_Left {
            get {
                return ResourceManager.GetString("LinksPage_LinkAlignmentStyle_Left", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stretch.
        /// </summary>
        public static string LinksPage_LinkAlignmentStyle_Stretch {
            get {
                return ResourceManager.GetString("LinksPage_LinkAlignmentStyle_Stretch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Button alignment.
        /// </summary>
        public static string LinksPage_LinkAlignmentStyleHeader {
            get {
                return ResourceManager.GetString("LinksPage_LinkAlignmentStyleHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Group.
        /// </summary>
        public static string LinksPage_LinkStyle_Group {
            get {
                return ResourceManager.GetString("LinksPage_LinkStyle_Group", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List.
        /// </summary>
        public static string LinksPage_LinkStyle_List {
            get {
                return ResourceManager.GetString("LinksPage_LinkStyle_List", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Link style.
        /// </summary>
        public static string LinksPage_LinkStyleHeader {
            get {
                return ResourceManager.GetString("LinksPage_LinkStyleHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local.
        /// </summary>
        public static string LinksPage_LocalHeader {
            get {
                return ResourceManager.GetString("LinksPage_LocalHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refresh.
        /// </summary>
        public static string LinksPage_Refresh {
            get {
                return ResourceManager.GetString("LinksPage_Refresh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modifications/Tools.
        /// </summary>
        public static string LinksPage_ToolsHeader {
            get {
                return ResourceManager.GetString("LinksPage_ToolsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Links.
        /// </summary>
        public static string LinksPageHeader {
            get {
                return ResourceManager.GetString("LinksPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select Install Directory.
        /// </summary>
        public static string LocateGame_BrowserHeader {
            get {
                return ResourceManager.GetString("LocateGame_BrowserHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when locating the game.
        /// </summary>
        public static string LocateGame_Error {
            get {
                return ResourceManager.GetString("LocateGame_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error locating game.
        /// </summary>
        public static string LocateGame_ErrorHeader {
            get {
                return ResourceManager.GetString("LocateGame_ErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected directory is not valid for this game.
        /// </summary>
        public static string LocateGame_InvalidLocation {
            get {
                return ResourceManager.GetString("LocateGame_InvalidLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Location.
        /// </summary>
        public static string LocateGame_InvalidLocationHeader {
            get {
                return ResourceManager.GetString("LocateGame_InvalidLocationHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game could not be found. Try choosing desktop app as the type instead..
        /// </summary>
        public static string LocateGame_InvalidSteamGame {
            get {
                return ResourceManager.GetString("LocateGame_InvalidSteamGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game not found.
        /// </summary>
        public static string LocateGame_InvalidSteamGameHeader {
            get {
                return ResourceManager.GetString("LocateGame_InvalidSteamGameHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game could not be found under installed Windows Store apps.
        /// </summary>
        public static string LocateGame_InvalidWinStoreGame {
            get {
                return ResourceManager.GetString("LocateGame_InvalidWinStoreGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game not found.
        /// </summary>
        public static string LocateGame_InvalidWinStoreGameHeader {
            get {
                return ResourceManager.GetString("LocateGame_InvalidWinStoreGameHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Message.
        /// </summary>
        public static string MessageHeader_Error {
            get {
                return ResourceManager.GetString("MessageHeader_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic Message.
        /// </summary>
        public static string MessageHeader_Generic {
            get {
                return ResourceManager.GetString("MessageHeader_Generic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information Message.
        /// </summary>
        public static string MessageHeader_Information {
            get {
                return ResourceManager.GetString("MessageHeader_Information", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Question Message.
        /// </summary>
        public static string MessageHeader_Question {
            get {
                return ResourceManager.GetString("MessageHeader_Question", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Success Message.
        /// </summary>
        public static string MessageHeader_Success {
            get {
                return ResourceManager.GetString("MessageHeader_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning Message.
        /// </summary>
        public static string MessageHeader_Warning {
            get {
                return ResourceManager.GetString("MessageHeader_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drive.
        /// </summary>
        public static string MountOption_Drive {
            get {
                return ResourceManager.GetString("MountOption_Drive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicate that the mount path is a drive or disc.
        /// </summary>
        public static string MountOption_DriveInfo {
            get {
                return ResourceManager.GetString("MountOption_DriveInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File.
        /// </summary>
        public static string MountOption_File {
            get {
                return ResourceManager.GetString("MountOption_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicate that the mount path is a file.
        /// </summary>
        public static string MountOption_FileInfo {
            get {
                return ResourceManager.GetString("MountOption_FileInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mount Path.
        /// </summary>
        public static string MountPathHeader {
            get {
                return ResourceManager.GetString("MountPathHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mount path can either be a file or a drive. If you&apos;re using the GOG version it&apos;ll be the &apos;game.inst&apos; file. If you have a disc image it is usually the .cue file. Otherwise use the drive letter of the game disc..
        /// </summary>
        public static string MountPathInfo {
            get {
                return ResourceManager.GetString("MountPathInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backups were not moved. A backup already exists in {0}.
        /// </summary>
        public static string MoveBackups_BackupAlreadyExists {
            get {
                return ResourceManager.GetString("MoveBackups_BackupAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error moving backup.
        /// </summary>
        public static string MoveBackups_Error {
            get {
                return ResourceManager.GetString("MoveBackups_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moving backups failed.
        /// </summary>
        public static string MoveBackups_ErrorHeader {
            get {
                return ResourceManager.GetString("MoveBackups_ErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No backups found in {0}.
        /// </summary>
        public static string MoveBackups_NoBackupsFound {
            get {
                return ResourceManager.GetString("MoveBackups_NoBackupsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to move existing backups to the new location?.
        /// </summary>
        public static string MoveBackups_Question {
            get {
                return ResourceManager.GetString("MoveBackups_Question", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move old backups.
        /// </summary>
        public static string MoveBackups_QuestionHeader {
            get {
                return ResourceManager.GetString("MoveBackups_QuestionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The backups have been moved successfully.
        /// </summary>
        public static string MoveBackups_Success {
            get {
                return ResourceManager.GetString("MoveBackups_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ok.
        /// </summary>
        public static string Ok {
            get {
                return ResourceManager.GetString("Ok", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup migration error.
        /// </summary>
        public static string PostUpdate_MigrateBackupErrorHeader {
            get {
                return ResourceManager.GetString("PostUpdate_MigrateBackupErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured when migrating the existing Rayman Fiesta Run backup to the new 5.0.0 backup standard. Due to this your backup will become unavailable, but will remain in your backup folder and can be restored manually..
        /// </summary>
        public static string PostUpdate_MigrateFiestaRunBackup5Error {
            get {
                return ResourceManager.GetString("PostUpdate_MigrateFiestaRunBackup5Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complete Soundtrack.
        /// </summary>
        public static string R1U_CompleteOSTHeader {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Forever, including the GOG version, does not come with the complete soundtrack due to disc space originally not being available. This utility can replace the existing incomplete soundtrack with the complete one, or alternatively revert it back..
        /// </summary>
        public static string R1U_CompleteOSTInfo {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with complete soundtrack.
        /// </summary>
        public static string R1U_CompleteOSTReplace {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Soundtrack replacement failed..
        /// </summary>
        public static string R1U_CompleteOSTReplaceError {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTReplaceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Revert back to incomplete soundtrack.
        /// </summary>
        public static string R1U_CompleteOSTRevert {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTRevert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0.74.
        /// </summary>
        public static string R1U_TPLS_DosBoxVersions_0_74 {
            get {
                return ResourceManager.GetString("R1U_TPLS_DosBoxVersions_0_74", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SVN Daum.
        /// </summary>
        public static string R1U_TPLS_DosBoxVersions_SVN_Daum {
            get {
                return ResourceManager.GetString("R1U_TPLS_DosBoxVersions_SVN_Daum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1.00.
        /// </summary>
        public static string R1U_TPLS_RayVersions_1_00 {
            get {
                return ResourceManager.GetString("R1U_TPLS_RayVersions_1_00", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1.12 (Edition 1).
        /// </summary>
        public static string R1U_TPLS_RayVersions_1_12 {
            get {
                return ResourceManager.GetString("R1U_TPLS_RayVersions_1_12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1.12 (Edition 2).
        /// </summary>
        public static string R1U_TPLS_RayVersions_1_12_1 {
            get {
                return ResourceManager.GetString("R1U_TPLS_RayVersions_1_12_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1.12 (Edition 3).
        /// </summary>
        public static string R1U_TPLS_RayVersions_1_12_2 {
            get {
                return ResourceManager.GetString("R1U_TPLS_RayVersions_1_12_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1.20.
        /// </summary>
        public static string R1U_TPLS_RayVersions_1_20 {
            get {
                return ResourceManager.GetString("R1U_TPLS_RayVersions_1_20", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1.21.
        /// </summary>
        public static string R1U_TPLS_RayVersions_1_21 {
            get {
                return ResourceManager.GetString("R1U_TPLS_RayVersions_1_21", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto.
        /// </summary>
        public static string R1U_TPLS_RayVersions_Auto {
            get {
                return ResourceManager.GetString("R1U_TPLS_RayVersions_Auto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you want to uninstall the PlayStation Soundtrack utility?.
        /// </summary>
        public static string R1U_TPLSConfirmUninstall {
            get {
                return ResourceManager.GetString("R1U_TPLSConfirmUninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm Uninstall.
        /// </summary>
        public static string R1U_TPLSConfirmUninstallHeader {
            get {
                return ResourceManager.GetString("R1U_TPLSConfirmUninstallHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        public static string R1U_TPLSDisabled {
            get {
                return ResourceManager.GetString("R1U_TPLSDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox version.
        /// </summary>
        public static string R1U_TPLSDosBoxVersion {
            get {
                return ResourceManager.GetString("R1U_TPLSDosBoxVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        public static string R1U_TPLSEnabled {
            get {
                return ResourceManager.GetString("R1U_TPLSEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PlayStation Soundtrack.
        /// </summary>
        public static string R1U_TPLSHeader {
            get {
                return ResourceManager.GetString("R1U_TPLSHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default the PC version of Rayman features fewer tracks than the PlayStation version and does not have specific tracks for each part of the levels. By enabling this utility the game will run with the PlayStation soundtrack added on top instead..
        /// </summary>
        public static string R1U_TPLSInfo {
            get {
                return ResourceManager.GetString("R1U_TPLSInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NOTE: This utility may not work on DOSBox versions 0.74-2 or higher. Version 0.74 will still work..
        /// </summary>
        public static string R1U_TPLSInfo2 {
            get {
                return ResourceManager.GetString("R1U_TPLSInfo2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        public static string R1U_TPLSInstall {
            get {
                return ResourceManager.GetString("R1U_TPLSInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation failed.
        /// </summary>
        public static string R1U_TPLSInstallationFailed {
            get {
                return ResourceManager.GetString("R1U_TPLSInstallationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation Failed.
        /// </summary>
        public static string R1U_TPLSInstallationFailedHeader {
            get {
                return ResourceManager.GetString("R1U_TPLSInstallationFailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game install directory does not contain a valid installation.
        /// </summary>
        public static string R1U_TPLSInvalidDirectory {
            get {
                return ResourceManager.GetString("R1U_TPLSInvalidDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Directory.
        /// </summary>
        public static string R1U_TPLSInvalidDirectoryHeader {
            get {
                return ResourceManager.GetString("R1U_TPLSInvalidDirectoryHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman version.
        /// </summary>
        public static string R1U_TPLSRaymanVersion {
            get {
                return ResourceManager.GetString("R1U_TPLSRaymanVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall.
        /// </summary>
        public static string R1U_TPLSUninstall {
            get {
                return ResourceManager.GetString("R1U_TPLSUninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred uninstalling. Error message: {0}.
        /// </summary>
        public static string R1U_TPLSUninstallError {
            get {
                return ResourceManager.GetString("R1U_TPLSUninstallError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstallation Failed.
        /// </summary>
        public static string R1U_TPLSUninstallErrorHeader {
            get {
                return ResourceManager.GetString("R1U_TPLSUninstallErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Utility was successfully uninstalled.
        /// </summary>
        public static string R1U_TPLSUninstallSuccess {
            get {
                return ResourceManager.GetString("R1U_TPLSUninstallSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall Complete.
        /// </summary>
        public static string R1U_TPLSUninstallSuccessHeader {
            get {
                return ResourceManager.GetString("R1U_TPLSUninstallSuccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid format.
        /// </summary>
        public static string R2HotKeyValidation_InvalidFormat {
            get {
                return ResourceManager.GetString("R2HotKeyValidation_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key is not valid.
        /// </summary>
        public static string R2HotKeyValidation_InvalidKey {
            get {
                return ResourceManager.GetString("R2HotKeyValidation_InvalidKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single key must be used.
        /// </summary>
        public static string R2HotKeyValidation_ModifierKeysUsed {
            get {
                return ResourceManager.GetString("R2HotKeyValidation_ModifierKeysUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply.
        /// </summary>
        public static string R2U_Apply {
            get {
                return ResourceManager.GetString("R2U_Apply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when applying the Rayman 2 translation utility.
        /// </summary>
        public static string R2U_Translations_Error {
            get {
                return ResourceManager.GetString("R2U_Translations_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required files could not be found.
        /// </summary>
        public static string R2U_Translations_FilesNotFound {
            get {
                return ResourceManager.GetString("R2U_Translations_FilesNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Irish.
        /// </summary>
        public static string R2U_Translations_Irish {
            get {
                return ResourceManager.GetString("R2U_Translations_Irish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Irish (Gaeilge) - by PluMGMK.
        /// </summary>
        public static string R2U_Translations_IrishInfo {
            get {
                return ResourceManager.GetString("R2U_Translations_IrishInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original.
        /// </summary>
        public static string R2U_Translations_Original {
            get {
                return ResourceManager.GetString("R2U_Translations_Original", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Portuguese.
        /// </summary>
        public static string R2U_Translations_Portuguese {
            get {
                return ResourceManager.GetString("R2U_Translations_Portuguese", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Portuguese (Português) - by Haruka Tavares.
        /// </summary>
        public static string R2U_Translations_PortugueseInfo {
            get {
                return ResourceManager.GetString("R2U_Translations_PortugueseInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is additionally recommended to also replace the game&apos;s textures file with a modified version to get the full font and characters required by this translation..
        /// </summary>
        public static string R2U_Translations_ReplaceTextures {
            get {
                return ResourceManager.GetString("R2U_Translations_ReplaceTextures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm textures replacement.
        /// </summary>
        public static string R2U_Translations_ReplaceTexturesHeader {
            get {
                return ResourceManager.GetString("R2U_Translations_ReplaceTexturesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Due to the textures file having been modified by the previous translation it is recommended to replace it with the original version..
        /// </summary>
        public static string R2U_Translations_RevertTextures {
            get {
                return ResourceManager.GetString("R2U_Translations_RevertTextures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Slovak.
        /// </summary>
        public static string R2U_Translations_Slovak {
            get {
                return ResourceManager.GetString("R2U_Translations_Slovak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Slovak (Slovenský) - by MixerX.
        /// </summary>
        public static string R2U_Translations_SlovakInfo {
            get {
                return ResourceManager.GetString("R2U_Translations_SlovakInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All files have been successfully replaced.
        /// </summary>
        public static string R2U_Translations_Success {
            get {
                return ResourceManager.GetString("R2U_Translations_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swedish.
        /// </summary>
        public static string R2U_Translations_Swedish {
            get {
                return ResourceManager.GetString("R2U_Translations_Swedish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Swedish (Svenska) - by RayCarrot.
        /// </summary>
        public static string R2U_Translations_SwedishInfo {
            get {
                return ResourceManager.GetString("R2U_Translations_SwedishInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unofficial Translations.
        /// </summary>
        public static string R2U_TranslationsHeader {
            get {
                return ResourceManager.GetString("R2U_TranslationsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Applying an unofficial translation will replace one of the in-game languages with the selected one. In most cases this will be the English one. The changes can at any time be reverted by applying the original version..
        /// </summary>
        public static string R2U_TranslationsInfo {
            get {
                return ResourceManager.GetString("R2U_TranslationsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when setting the Rayman 2 aspect ratio.
        /// </summary>
        public static string R2Widescreen_Error {
            get {
                return ResourceManager.GetString("R2Widescreen_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The aspect ratio could not be set due to the game executable not being found..
        /// </summary>
        public static string R2Widescreen_ExeNotFound {
            get {
                return ResourceManager.GetString("R2Widescreen_ExeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The aspect ratio could not be set due to the game executable not being valid..
        /// </summary>
        public static string R2Widescreen_ExeNotValid {
            get {
                return ResourceManager.GetString("R2Widescreen_ExeNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        public static string R3U_DirectPlayDisabled {
            get {
                return ResourceManager.GetString("R3U_DirectPlayDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        public static string R3U_DirectPlayEnabled {
            get {
                return ResourceManager.GetString("R3U_DirectPlayEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run the program as administrator in order to set the DirectPlay status.
        /// </summary>
        public static string R3U_DirectPlayErrorInfo {
            get {
                return ResourceManager.GetString("R3U_DirectPlayErrorInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DirectPlay.
        /// </summary>
        public static string R3U_DirectPlayHeader {
            get {
                return ResourceManager.GetString("R3U_DirectPlayHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DirectPlay needs to be enabled in order to run Rayman 3. By default it is usually disabled on Windows 10..
        /// </summary>
        public static string R3U_DirectPlayInfo {
            get {
                return ResourceManager.GetString("R3U_DirectPlayInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File could not be created.
        /// </summary>
        public static string RDU_CreateConfig_Error {
            get {
                return ResourceManager.GetString("RDU_CreateConfig_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration file already exists. You can still recreate it if it is corrupt. Continue?.
        /// </summary>
        public static string RDU_CreateConfig_ReplaceQuestion {
            get {
                return ResourceManager.GetString("RDU_CreateConfig_ReplaceQuestion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace File.
        /// </summary>
        public static string RDU_CreateConfig_ReplaceQuestionHeader {
            get {
                return ResourceManager.GetString("RDU_CreateConfig_ReplaceQuestionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file was successfully created..
        /// </summary>
        public static string RDU_CreateConfig_Success {
            get {
                return ResourceManager.GetString("RDU_CreateConfig_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create.
        /// </summary>
        public static string RDU_CreateConfigCreate {
            get {
                return ResourceManager.GetString("RDU_CreateConfigCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create Missing Configuration File.
        /// </summary>
        public static string RDU_CreateConfigHeader {
            get {
                return ResourceManager.GetString("RDU_CreateConfigHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to During some Rayman Designer installations the configuration file won&apos;t be created, causing the Mapper to give an error when launching. This utility will fix that issue by creating the configuration file if not present..
        /// </summary>
        public static string RDU_CreateConfigInfo {
            get {
                return ResourceManager.GetString("RDU_CreateConfigInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replacement complete.
        /// </summary>
        public static string RDU_ReplaceFiles_Complete {
            get {
                return ResourceManager.GetString("RDU_ReplaceFiles_Complete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Soundtrack replacement failed..
        /// </summary>
        public static string RDU_ReplaceFiles_Error {
            get {
                return ResourceManager.GetString("RDU_ReplaceFiles_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}/{1} files were found to replace. This might require several downloads depending on their locations..
        /// </summary>
        public static string RDU_ReplaceFiles_InfoMessage {
            get {
                return ResourceManager.GetString("RDU_ReplaceFiles_InfoMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace Infected Files.
        /// </summary>
        public static string RDU_ReplaceFilesHeader {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some versions of Rayman Designer, including Rayman Forever, have some of the RayKit files infected with a malware. Although it does not appear to be harmful, or even active, and GOG has confirmed there is no danger, you can still safely replace the files with their non-infected versions using this utility..
        /// </summary>
        public static string RDU_ReplaceFilesInfo {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string RDU_ReplaceFilesLanguage {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace.
        /// </summary>
        public static string RDU_ReplaceFilesReplace {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred reading the backup for {0}.
        /// </summary>
        public static string ReadingBackupError {
            get {
                return ResourceManager.GetString("ReadingBackupError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following utilities have been applied to this game and will not be removed when removing the game. To remove the utilities, go to the utilities dialog and disable/uninstall them or revert back to the original option if available..
        /// </summary>
        public static string RemoveGame_UtilityWarning {
            get {
                return ResourceManager.GetString("RemoveGame_UtilityWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Utility warning.
        /// </summary>
        public static string RemoveGame_UtilityWarningHeader {
            get {
                return ResourceManager.GetString("RemoveGame_UtilityWarningHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you want to remove {0} from the Rayman Control Panel? This will not remove the game from your computer or any of its files, including the backups created using this program..
        /// </summary>
        public static string RemoveGameQuestion {
            get {
                return ResourceManager.GetString("RemoveGameQuestion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm remove.
        /// </summary>
        public static string RemoveGameQuestionHeader {
            get {
                return ResourceManager.GetString("RemoveGameQuestionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace current {0} save files with backed up ones..
        /// </summary>
        public static string Restore_Confirm {
            get {
                return ResourceManager.GetString("Restore_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm restore.
        /// </summary>
        public static string Restore_ConfirmHeader {
            get {
                return ResourceManager.GetString("Restore_ConfirmHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore failed for {0}.
        /// </summary>
        public static string Restore_Failed {
            get {
                return ResourceManager.GetString("Restore_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore failed.
        /// </summary>
        public static string Restore_FailedHeader {
            get {
                return ResourceManager.GetString("Restore_FailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no backup found for {0}.
        /// </summary>
        public static string Restore_MissingBackup {
            get {
                return ResourceManager.GetString("Restore_MissingBackup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your save files for {0} were successfully restored.
        /// </summary>
        public static string Restore_Success {
            get {
                return ResourceManager.GetString("Restore_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore successful.
        /// </summary>
        public static string Restore_SuccessHeader {
            get {
                return ResourceManager.GetString("Restore_SuccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply.
        /// </summary>
        public static string RLU_Apply {
            get {
                return ResourceManager.GetString("RLU_Apply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not read save file.
        /// </summary>
        public static string RLU_UbiRay_CouldNotReadFile {
            get {
                return ResourceManager.GetString("RLU_UbiRay_CouldNotReadFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please select a valid save directory.
        /// </summary>
        public static string RLU_UbiRay_InvalidSaveDir {
            get {
                return ResourceManager.GetString("RLU_UbiRay_InvalidSaveDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make sure the normal Rayman skin is selected and try again.
        /// </summary>
        public static string RLU_UbiRay_RaymanSkinNotFound {
            get {
                return ResourceManager.GetString("RLU_UbiRay_RaymanSkinNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your save file was successfully edited with Ubi-Ray.
        /// </summary>
        public static string RLU_UbiRay_Success {
            get {
                return ResourceManager.GetString("RLU_UbiRay_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IMPORTANT: For this utility to work you need to have the default Rayman costume selected as the current costume. Only continue if you are sure you have it selected..
        /// </summary>
        public static string RLU_UbiRay_Warning {
            get {
                return ResourceManager.GetString("RLU_UbiRay_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UbiRay Character.
        /// </summary>
        public static string RLU_UbiRayHeader {
            get {
                return ResourceManager.GetString("RLU_UbiRayHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UbiRay is a character not available in the game to play as, but still in the game files. This utility will modify your save file so that UbiRay is the selected character, thus allowing you to play as him..
        /// </summary>
        public static string RLU_UbiRayInfo {
            get {
                return ResourceManager.GetString("RLU_UbiRayInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: This utility is experimental and might corrupt your save file. Always make a backup before using it..
        /// </summary>
        public static string RLU_UbiRayWarning {
            get {
                return ResourceManager.GetString("RLU_UbiRayWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        public static string ROU_DebugCommandsDisabled {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        public static string ROU_DebugCommandsEnabled {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when applying the debug commands.
        /// </summary>
        public static string ROU_DebugCommandsError {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Framerate.
        /// </summary>
        public static string ROU_DebugCommandsFramerate {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsFramerate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will set the framerate to run the game in.
        /// </summary>
        public static string ROU_DebugCommandsFramerateInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsFramerateInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug Commands.
        /// </summary>
        public static string ROU_DebugCommandsHeader {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide mouse pointer.
        /// </summary>
        public static string ROU_DebugCommandsHideMouse {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsHideMouse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will hide the mouse pointer in the game menus.
        /// </summary>
        public static string ROU_DebugCommandsHideMouseInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsHideMouseInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using any of the below debug commands allows the game to be launched in a debug environment, with the commands changing how the game runs..
        /// </summary>
        public static string ROU_DebugCommandsInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Rayman Origins installation could not be found.
        /// </summary>
        public static string ROU_DebugCommandsInstallationNotFound {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsInstallationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invincibility.
        /// </summary>
        public static string ROU_DebugCommandsInvincibility {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsInvincibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This allows the player to not die when taking damage.
        /// </summary>
        public static string ROU_DebugCommandsInvincibilityInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsInvincibilityInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string ROU_DebugCommandsLanguage {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will change the language the game runs in.
        /// </summary>
        public static string ROU_DebugCommandsLanguageInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsLanguageInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Map.
        /// </summary>
        public static string ROU_DebugCommandsMap {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will allow a specific map to be loaded instead of the main menu upon starting the game.
        /// </summary>
        public static string ROU_DebugCommandsMapInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsMapInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max camera zoom.
        /// </summary>
        public static string ROU_DebugCommandsMaxZoom {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsMaxZoom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will max out the camera zoom.
        /// </summary>
        public static string ROU_DebugCommandsMaxZoomInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsMaxZoomInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: Using these debug commands may corrupt your save file. Always make a backup before using them..
        /// </summary>
        public static string ROU_DebugCommandsWarning {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Video replacement failed.
        /// </summary>
        public static string ROU_HQVideosFailed {
            get {
                return ResourceManager.GetString("ROU_HQVideosFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Higher Quality Videos.
        /// </summary>
        public static string ROU_HQVideosHeader {
            get {
                return ResourceManager.GetString("ROU_HQVideosHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video cutscenes in the PC version are compressed and in lower quality than in the console versions. This utility replaces those videos with the higher quality ones from the console versions..
        /// </summary>
        public static string ROU_HQVideosInfo {
            get {
                return ResourceManager.GetString("ROU_HQVideosInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with the high quality videos.
        /// </summary>
        public static string ROU_HQVideosReplace {
            get {
                return ResourceManager.GetString("ROU_HQVideosReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Revert back to the original videos.
        /// </summary>
        public static string ROU_HQVideosRevert {
            get {
                return ResourceManager.GetString("ROU_HQVideosRevert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloading the Rayman Origins updater failed.
        /// </summary>
        public static string ROU_UpdateFailed {
            get {
                return ResourceManager.GetString("ROU_UpdateFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update to 1.02 (Disc version).
        /// </summary>
        public static string ROU_UpdateHeader {
            get {
                return ResourceManager.GetString("ROU_UpdateHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case Rayman Origins has not been automatically updated to its latest version, 1.02, this utility can update it..
        /// </summary>
        public static string ROU_UpdateInfo {
            get {
                return ResourceManager.GetString("ROU_UpdateInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update.
        /// </summary>
        public static string ROU_UpdateUpdate {
            get {
                return ResourceManager.GetString("ROU_UpdateUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save.
        /// </summary>
        public static string Save {
            get {
                return ResourceManager.GetString("Save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You just entered the Konami code! Enjoy this red new theme..
        /// </summary>
        public static string SecretCodes_Konami {
            get {
                return ResourceManager.GetString("SecretCodes_Konami", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Konami Code.
        /// </summary>
        public static string SecretCodes_KonamiHeader {
            get {
                return ResourceManager.GetString("SecretCodes_KonamiHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You just entered the lime code! Enjoy this lime theme..
        /// </summary>
        public static string SecretCodes_Lime {
            get {
                return ResourceManager.GetString("SecretCodes_Lime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lime Code.
        /// </summary>
        public static string SecretCodes_LimeHeader {
            get {
                return ResourceManager.GetString("SecretCodes_LimeHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You just entered the RayCarrot code! Enjoy this orange, carrot theme..
        /// </summary>
        public static string SecretCodes_RayCarrot {
            get {
                return ResourceManager.GetString("SecretCodes_RayCarrot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RayCarrot Code.
        /// </summary>
        public static string SecretCodes_RayCarrotHeader {
            get {
                return ResourceManager.GetString("SecretCodes_RayCarrotHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You just entered the secret code! Sadly enough it doesn&apos;t do anything..
        /// </summary>
        public static string SecretCodes_Secret {
            get {
                return ResourceManager.GetString("SecretCodes_Secret", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secret Code.
        /// </summary>
        public static string SecretCodes_SecretHeader {
            get {
                return ResourceManager.GetString("SecretCodes_SecretHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This feature requires the program to run as administrator.
        /// </summary>
        public static string Settings_AdminInfo {
            get {
                return ResourceManager.GetString("Settings_AdminInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup location.
        /// </summary>
        public static string Settings_BackupLocation {
            get {
                return ResourceManager.GetString("Settings_BackupLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display exception level.
        /// </summary>
        public static string Settings_DebugExceptionLevel {
            get {
                return ResourceManager.GetString("Settings_DebugExceptionLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The exception level for displaying debug and trace information.
        /// </summary>
        public static string Settings_DebugExceptionLevelInfo {
            get {
                return ResourceManager.GetString("Settings_DebugExceptionLevelInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string Settings_DebugHeader {
            get {
                return ResourceManager.GetString("Settings_DebugHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable animations.
        /// </summary>
        public static string Settings_DesignAnimations {
            get {
                return ResourceManager.GetString("Settings_DesignAnimations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Animations include page transitions and resizing animations for the Games page.
        /// </summary>
        public static string Settings_DesignAnimationsInfo {
            get {
                return ResourceManager.GetString("Settings_DesignAnimationsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dark.
        /// </summary>
        public static string Settings_DesignDark {
            get {
                return ResourceManager.GetString("Settings_DesignDark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design.
        /// </summary>
        public static string Settings_DesignHeader {
            get {
                return ResourceManager.GetString("Settings_DesignHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Light.
        /// </summary>
        public static string Settings_DesignLight {
            get {
                return ResourceManager.GetString("Settings_DesignLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show games which are not installed.
        /// </summary>
        public static string Settings_DesignShowAllGames {
            get {
                return ResourceManager.GetString("Settings_DesignShowAllGames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show all games on the games page, even if they are not installed.
        /// </summary>
        public static string Settings_DesignShowAllGamesInfo {
            get {
                return ResourceManager.GetString("Settings_DesignShowAllGamesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show detailed game information.
        /// </summary>
        public static string Settings_DesignShowGameDetails {
            get {
                return ResourceManager.GetString("Settings_DesignShowGameDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show detailed game information in the game options dialog.
        /// </summary>
        public static string Settings_DesignShowGameDetailsInfo {
            get {
                return ResourceManager.GetString("Settings_DesignShowGameDetailsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show progress on task bar icon.
        /// </summary>
        public static string Settings_DesignShowTaskBarProgress {
            get {
                return ResourceManager.GetString("Settings_DesignShowTaskBarProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show download progress on the taskbar icon.
        /// </summary>
        public static string Settings_DesignShowTaskBarProgressInfo {
            get {
                return ResourceManager.GetString("Settings_DesignShowTaskBarProgressInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show success messages.
        /// </summary>
        public static string Settings_DesignSuccessMessages {
            get {
                return ResourceManager.GetString("Settings_DesignSuccessMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show a message when an operation has succeeded.
        /// </summary>
        public static string Settings_DesignSuccessMessagesInfo {
            get {
                return ResourceManager.GetString("Settings_DesignSuccessMessagesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disable downgrade warning.
        /// </summary>
        public static string Settings_DisableDowngradeWarning {
            get {
                return ResourceManager.GetString("Settings_DisableDowngradeWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox.
        /// </summary>
        public static string Settings_DosBoxHeader {
            get {
                return ResourceManager.GetString("Settings_DosBoxHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox file path.
        /// </summary>
        public static string Settings_DosBoxPath {
            get {
                return ResourceManager.GetString("Settings_DosBoxPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DOSBox executable file path.
        /// </summary>
        public static string Settings_DosBoxPathInfo {
            get {
                return ResourceManager.GetString("Settings_DosBoxPathInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Force manual updates.
        /// </summary>
        public static string Settings_ForceUpdates {
            get {
                return ResourceManager.GetString("Settings_ForceUpdates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close application when launching a game.
        /// </summary>
        public static string Settings_GeneralCloseOnLaunch {
            get {
                return ResourceManager.GetString("Settings_GeneralCloseOnLaunch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close configuration dialog when saving.
        /// </summary>
        public static string Settings_GeneralCloseOnSave {
            get {
                return ResourceManager.GetString("Settings_GeneralCloseOnSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        public static string Settings_GeneralHeader {
            get {
                return ResourceManager.GetString("Settings_GeneralHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Get beta updates.
        /// </summary>
        public static string Settings_GetBetaUpdates {
            get {
                return ResourceManager.GetString("Settings_GetBetaUpdates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show languages with incomplete translations.
        /// </summary>
        public static string Settings_IncompleteTranslations {
            get {
                return ResourceManager.GetString("Settings_IncompleteTranslations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string Settings_Language {
            get {
                return ResourceManager.GetString("Settings_Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contribute with translations.
        /// </summary>
        public static string Settings_LanguageContribute {
            get {
                return ResourceManager.GetString("Settings_LanguageContribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox configuration file path (optional).
        /// </summary>
        public static string Settings_OptionalDosBoxConfigPath {
            get {
                return ResourceManager.GetString("Settings_OptionalDosBoxConfigPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DOSBox configuration file path.
        /// </summary>
        public static string Settings_OptionalDosBoxConfigPathInfo {
            get {
                return ResourceManager.GetString("Settings_OptionalDosBoxConfigPathInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show under installed programs.
        /// </summary>
        public static string Settings_ShowUnderInstalledPrograms {
            get {
                return ResourceManager.GetString("Settings_ShowUnderInstalledPrograms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating the program information under installed programs failed. Try restarting as administrator to try again..
        /// </summary>
        public static string Settings_ShowUnderInstalledPrograms_UpdateError {
            get {
                return ResourceManager.GetString("Settings_ShowUnderInstalledPrograms_UpdateError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this is enabled the program will be shown under the list of installed programs on this computer, most commonly found under Uninstall Program in the Windows Control Panel. If this is enabled the program may require administration privileges during an update in order to update the program information..
        /// </summary>
        public static string Settings_ShowUnderInstalledProgramsInfo {
            get {
                return ResourceManager.GetString("Settings_ShowUnderInstalledProgramsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search for installed games.
        /// </summary>
        public static string Settings_StartupGameFinder {
            get {
                return ResourceManager.GetString("Settings_StartupGameFinder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Startup.
        /// </summary>
        public static string Settings_StartupHeader {
            get {
                return ResourceManager.GetString("Settings_StartupHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check for program updates.
        /// </summary>
        public static string Settings_StartupUpdateCheck {
            get {
                return ResourceManager.GetString("Settings_StartupUpdateCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User Level.
        /// </summary>
        public static string Settings_UserLevel {
            get {
                return ResourceManager.GetString("Settings_UserLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Advanced.
        /// </summary>
        public static string Settings_UserLevelAdvanced {
            get {
                return ResourceManager.GetString("Settings_UserLevelAdvanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Advanced user level - for users who want more advanced features above the default ones, but without the technical details.
        /// </summary>
        public static string Settings_UserLevelAdvancedInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelAdvancedInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string Settings_UserLevelDebug {
            get {
                return ResourceManager.GetString("Settings_UserLevelDebug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug user level - for app developers and testers who want advanced debug options and information.
        /// </summary>
        public static string Settings_UserLevelDebugInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelDebugInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user level determines which options and information is available in the application. The higher the user level, the more advanced options and information will be shown..
        /// </summary>
        public static string Settings_UserLevelInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal.
        /// </summary>
        public static string Settings_UserLevelNormal {
            get {
                return ResourceManager.GetString("Settings_UserLevelNormal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal user level - for users who want all the default features without any of the more advanced options or technical details.
        /// </summary>
        public static string Settings_UserLevelNormalInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelNormalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technical.
        /// </summary>
        public static string Settings_UserLevelTechnical {
            get {
                return ResourceManager.GetString("Settings_UserLevelTechnical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technical user level - for users who want more advanced features above the default ones as well as the technical details.
        /// </summary>
        public static string Settings_UserLevelTechnicalInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelTechnicalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        public static string SettingsPageHeader {
            get {
                return ResourceManager.GetString("SettingsPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close.
        /// </summary>
        public static string TaskBarIcon_Close {
            get {
                return ResourceManager.GetString("TaskBarIcon_Close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open.
        /// </summary>
        public static string TaskBarIcon_Open {
            get {
                return ResourceManager.GetString("TaskBarIcon_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PlayStation soundtrack utility crashed with the error message of: {0}
        ///Restart?.
        /// </summary>
        public static string TPLS_Error {
            get {
                return ResourceManager.GetString("TPLS_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPLS Error.
        /// </summary>
        public static string TPLS_ErrorHeader {
            get {
                return ResourceManager.GetString("TPLS_ErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred playing the soundtrack.
        /// </summary>
        public static string TPLS_PlaybackError {
            get {
                return ResourceManager.GetString("TPLS_PlaybackError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The soundtrack file is missing.
        /// </summary>
        public static string TPLS_PlaybackError_FileNotFound {
            get {
                return ResourceManager.GetString("TPLS_PlaybackError_FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The soundtrack file is in an incorrect format.
        /// </summary>
        public static string TPLS_PlaybackError_InvalidData {
            get {
                return ResourceManager.GetString("TPLS_PlaybackError_InvalidData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playback Error.
        /// </summary>
        public static string TPLS_PlaybackErrorHeader {
            get {
                return ResourceManager.GetString("TPLS_PlaybackErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when attempting to enable write access for the Rayman configuration file.
        /// </summary>
        public static string UbiIniWriteAccess_Error {
            get {
                return ResourceManager.GetString("UbiIniWriteAccess_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To be able to configure the Rayman games without running this program as administrator you will need to accept the following admin prompt.
        /// </summary>
        public static string UbiIniWriteAccess_InfoMessage {
            get {
                return ResourceManager.GetString("UbiIniWriteAccess_InfoMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Due to the state of the program being changed it needs to update the information stored under installed programs. This requires the program to run as administrator. Until then the information shown under installed programs might not be accurate..
        /// </summary>
        public static string UninstallRegKeyRequiresRefresh {
            get {
                return ResourceManager.GetString("UninstallRegKeyRequiresRefresh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new beta update is available to download. Download now?.
        /// </summary>
        public static string Update_BetaUpdateAvailable {
            get {
                return ResourceManager.GetString("Update_BetaUpdateAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update Check Failed.
        /// </summary>
        public static string Update_ErrorHeader {
            get {
                return ResourceManager.GetString("Update_ErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The information from the server was not valid.
        /// </summary>
        public static string Update_FormatError {
            get {
                return ResourceManager.GetString("Update_FormatError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occurred while connecting to the server.
        /// </summary>
        public static string Update_GenericError {
            get {
                return ResourceManager.GetString("Update_GenericError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The latest version ({0}) is already installed.
        /// </summary>
        public static string Update_LatestInstalled {
            get {
                return ResourceManager.GetString("Update_LatestInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No new versions found.
        /// </summary>
        public static string Update_LatestInstalledHeader {
            get {
                return ResourceManager.GetString("Update_LatestInstalledHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server manifest could not be read.
        /// </summary>
        public static string Update_ManifestError {
            get {
                return ResourceManager.GetString("Update_ManifestError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error getting news.
        /// </summary>
        public static string Update_NewsError {
            get {
                return ResourceManager.GetString("Update_NewsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The updater could not be launched. To manually download the new version, go to {0} and download the latest version from there..
        /// </summary>
        public static string Update_RunningUpdaterError {
            get {
                return ResourceManager.GetString("Update_RunningUpdaterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error running updater.
        /// </summary>
        public static string Update_RunningUpdaterErrorHeader {
            get {
                return ResourceManager.GetString("Update_RunningUpdaterErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown error.
        /// </summary>
        public static string Update_UnknownError {
            get {
                return ResourceManager.GetString("Update_UnknownError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new update is available to download. Download now?
        ///
        ///News: 
        ///{0}.
        /// </summary>
        public static string Update_UpdateAvailable {
            get {
                return ResourceManager.GetString("Update_UpdateAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New version found.
        /// </summary>
        public static string Update_UpdateAvailableHeader {
            get {
                return ResourceManager.GetString("Update_UpdateAvailableHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The updater could not be created. To manually download the new version, go to {0} and download the latest version from there..
        /// </summary>
        public static string Update_UpdaterError {
            get {
                return ResourceManager.GetString("Update_UpdaterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error creating updater.
        /// </summary>
        public static string Update_UpdaterErrorHeader {
            get {
                return ResourceManager.GetString("Update_UpdaterErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A connection could not be established to the server.
        /// </summary>
        public static string Update_WebError {
            get {
                return ResourceManager.GetString("Update_WebError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This utility requires additonal files to be downloaded.
        /// </summary>
        public static string Utility_AdditionalFilesRequired {
            get {
                return ResourceManager.GetString("Utility_AdditionalFilesRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Minimize to tray.
        /// </summary>
        public static string Window_MinimizeToTray {
            get {
                return ResourceManager.GetString("Window_MinimizeToTray", resourceCulture);
            }
        }
    }
}
