//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RayCarrot.RCP.Metro {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RayCarrot.RCP.Metro.Localization.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Credits.
        /// </summary>
        public static string About_Credits {
            get {
                return ResourceManager.GetString("About_Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Email.
        /// </summary>
        public static string About_Email {
            get {
                return ResourceManager.GetString("About_Email", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GitHub.
        /// </summary>
        public static string About_GitHub {
            get {
                return ResourceManager.GetString("About_GitHub", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Control Panel is an open source community project created by RayCarrot. This software is a single free to use executable file with the intent to easily access settings and fixes for the various Rayman titles released for Windows.
        ///This is a growing project with more features planned on being added with future updates. The utilities and various configuration tools have been created with help from various members of the Rayman community, all credited below..
        /// </summary>
        public static string About_ProgramInfo {
            get {
                return ResourceManager.GetString("About_ProgramInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Twitter.
        /// </summary>
        public static string About_Twitter {
            get {
                return ResourceManager.GetString("About_Twitter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check for new updates.
        /// </summary>
        public static string About_UpdateCheck {
            get {
                return ResourceManager.GetString("About_UpdateCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update history.
        /// </summary>
        public static string About_UpdateHistory {
            get {
                return ResourceManager.GetString("About_UpdateHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to YouTube.
        /// </summary>
        public static string About_YouTube {
            get {
                return ResourceManager.GetString("About_YouTube", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        public static string AboutPageHeader {
            get {
                return ResourceManager.GetString("AboutPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accept.
        /// </summary>
        public static string Accept {
            get {
                return ResourceManager.GetString("Accept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Control Panel.
        /// </summary>
        public static string AppName {
            get {
                return ResourceManager.GetString("AppName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup.
        /// </summary>
        public static string Backup_Backup {
            get {
                return ResourceManager.GetString("Backup_Backup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Last Backup.
        /// </summary>
        public static string Backup_LastBackupDate {
            get {
                return ResourceManager.GetString("Backup_LastBackupDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup Size.
        /// </summary>
        public static string Backup_LastBackupSize {
            get {
                return ResourceManager.GetString("Backup_LastBackupSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore.
        /// </summary>
        public static string Backup_Restore {
            get {
                return ResourceManager.GetString("Backup_Restore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup/Restore.
        /// </summary>
        public static string BackupPageHeader {
            get {
                return ResourceManager.GetString("BackupPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string Cancel {
            get {
                return ResourceManager.GetString("Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Button Mapping (keyboard).
        /// </summary>
        public static string Config_ButtonMapping {
            get {
                return ResourceManager.GetString("Config_ButtonMapping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action.
        /// </summary>
        public static string Config_ButtonMappingActionHeader {
            get {
                return ResourceManager.GetString("Config_ButtonMappingActionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As the game doesn&apos;t allow native button remapping you change it here. This will not work for controllers..
        /// </summary>
        public static string Config_ButtonMappingInfo {
            get {
                return ResourceManager.GetString("Config_ButtonMappingInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key.
        /// </summary>
        public static string Config_ButtonMappingKeyHeader {
            get {
                return ResourceManager.GetString("Config_ButtonMappingKeyHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset.
        /// </summary>
        public static string Config_ButtonMappingReset {
            get {
                return ResourceManager.GetString("Config_ButtonMappingReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compressed.
        /// </summary>
        public static string Config_Compressed {
            get {
                return ResourceManager.GetString("Config_Compressed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controller.
        /// </summary>
        public static string Config_Controller {
            get {
                return ResourceManager.GetString("Config_Controller", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Horizontal Axis.
        /// </summary>
        public static string Config_ControllerHorizontal {
            get {
                return ResourceManager.GetString("Config_ControllerHorizontal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If your controller is not recognized you can enable controller support here.
        /// </summary>
        public static string Config_ControllerInfo {
            get {
                return ResourceManager.GetString("Config_ControllerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If your controller is not recognized you can enable controller support here. This will remove any custom button mapping..
        /// </summary>
        public static string Config_ControllerR2Info {
            get {
                return ResourceManager.GetString("Config_ControllerR2Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical Axis.
        /// </summary>
        public static string Config_ControllerVertical {
            get {
                return ResourceManager.GetString("Config_ControllerVertical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dynamic Shadows.
        /// </summary>
        public static string Config_DynamicShadows {
            get {
                return ResourceManager.GetString("Config_DynamicShadows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable native controller support.
        /// </summary>
        public static string Config_EnableNativeController {
            get {
                return ResourceManager.GetString("Config_EnableNativeController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen.
        /// </summary>
        public static string Config_Fullscreen {
            get {
                return ResourceManager.GetString("Config_Fullscreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes the game run in fullscreen, otherwise it&apos;ll run in windowed mode.
        /// </summary>
        public static string Config_FullscreenInfo {
            get {
                return ResourceManager.GetString("Config_FullscreenInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Graphics.
        /// </summary>
        public static string Config_Graphics {
            get {
                return ResourceManager.GetString("Config_Graphics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string Config_Language {
            get {
                return ResourceManager.GetString("Config_Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sets the default language selected when launching the game. The language can still be changed from the game menu..
        /// </summary>
        public static string Config_LanguageR2Info {
            get {
                return ResourceManager.GetString("Config_LanguageR2Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock to screen resolution.
        /// </summary>
        public static string Config_LockRes {
            get {
                return ResourceManager.GetString("Config_LockRes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locks the horizontal and vertical values to the ones of the current screen resolution.
        /// </summary>
        public static string Config_LockResInfo {
            get {
                return ResourceManager.GetString("Config_LockResInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network.
        /// </summary>
        public static string Config_Network {
            get {
                return ResourceManager.GetString("Config_Network", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolution.
        /// </summary>
        public static string Config_Resolution {
            get {
                return ResourceManager.GetString("Config_Resolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The horizontal screen resolution.
        /// </summary>
        public static string Config_ResolutionHorizontalInfo {
            get {
                return ResourceManager.GetString("Config_ResolutionHorizontalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the widescreen support is not enabled the game will stretch if set to an aspect ratio other than 4:3.
        /// </summary>
        public static string Config_ResolutionR2Info {
            get {
                return ResourceManager.GetString("Config_ResolutionR2Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting the resolution to an aspect ratio other than 4:3 will stretch the game, even with the internal widescreen option turned on.
        /// </summary>
        public static string Config_ResolutionRRRInfo {
            get {
                return ResourceManager.GetString("Config_ResolutionRRRInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The vertical screen resolution.
        /// </summary>
        public static string Config_ResolutionVerticalInfo {
            get {
                return ResourceManager.GetString("Config_ResolutionVerticalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Screen Mode.
        /// </summary>
        public static string Config_RRRScreenMode {
            get {
                return ResourceManager.GetString("Config_RRRScreenMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The screen mode options will behave differently depending on the selected resolution. Usually keeping the 4:3 mode enabled will allow the game not to be stretched on different aspect ratios..
        /// </summary>
        public static string Config_RRRScreenModeInfo {
            get {
                return ResourceManager.GetString("Config_RRRScreenModeInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Data Location.
        /// </summary>
        public static string Config_SaveDataLocation {
            get {
                return ResourceManager.GetString("Config_SaveDataLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to App data.
        /// </summary>
        public static string Config_SaveDataLocationAppData {
            get {
                return ResourceManager.GetString("Config_SaveDataLocationAppData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will not change where the game saves it data. Use this only to specify the data location for the backup tool..
        /// </summary>
        public static string Config_SaveDataLocationInfo {
            get {
                return ResourceManager.GetString("Config_SaveDataLocationInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install directory.
        /// </summary>
        public static string Config_SaveDataLocationInstDir {
            get {
                return ResourceManager.GetString("Config_SaveDataLocationInstDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static Shadows.
        /// </summary>
        public static string Config_StaticShadows {
            get {
                return ResourceManager.GetString("Config_StaticShadows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Textures.
        /// </summary>
        public static string Config_Textures {
            get {
                return ResourceManager.GetString("Config_Textures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 16 bit.
        /// </summary>
        public static string Config_Textures16 {
            get {
                return ResourceManager.GetString("Config_Textures16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 32 bit.
        /// </summary>
        public static string Config_Textures32 {
            get {
                return ResourceManager.GetString("Config_Textures32", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transform and Lightning.
        /// </summary>
        public static string Config_TnL {
            get {
                return ResourceManager.GetString("Config_TnL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uncheck this if there are graphical glitches in the game.
        /// </summary>
        public static string Config_TnLInfo {
            get {
                return ResourceManager.GetString("Config_TnLInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TriLinear.
        /// </summary>
        public static string Config_TriLinear {
            get {
                return ResourceManager.GetString("Config_TriLinear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use connected controller.
        /// </summary>
        public static string Config_UseController {
            get {
                return ResourceManager.GetString("Config_UseController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical widescreen.
        /// </summary>
        public static string Config_VerticalHorizontal {
            get {
                return ResourceManager.GetString("Config_VerticalHorizontal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Video.
        /// </summary>
        public static string Config_Video {
            get {
                return ResourceManager.GetString("Config_Video", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 16 bits per pixel.
        /// </summary>
        public static string Config_Video16Bpp {
            get {
                return ResourceManager.GetString("Config_Video16Bpp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 32 bits per pixel.
        /// </summary>
        public static string Config_Video32Bpp {
            get {
                return ResourceManager.GetString("Config_Video32Bpp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto adjust quality.
        /// </summary>
        public static string Config_VideoAuto {
            get {
                return ResourceManager.GetString("Config_VideoAuto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad quality.
        /// </summary>
        public static string Config_VideoBad {
            get {
                return ResourceManager.GetString("Config_VideoBad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Good quality.
        /// </summary>
        public static string Config_VideoGood {
            get {
                return ResourceManager.GetString("Config_VideoGood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Horizontal widescreen.
        /// </summary>
        public static string Config_WidescreenHorizontal {
            get {
                return ResourceManager.GetString("Config_WidescreenHorizontal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make the widescreen expand horizontally.
        /// </summary>
        public static string Config_WidescreenHorizontalInfo {
            get {
                return ResourceManager.GetString("Config_WidescreenHorizontalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Widescreen support.
        /// </summary>
        public static string Config_WidescreenSupport {
            get {
                return ResourceManager.GetString("Config_WidescreenSupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Widescreen support ensures that the game is not stretched when running in an aspect ratio other than 4:3.
        /// </summary>
        public static string Config_WidescreenSupportInfo {
            get {
                return ResourceManager.GetString("Config_WidescreenSupportInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make the widescreen shrink vertically.
        /// </summary>
        public static string Config_WidescreenVerticalInfo {
            get {
                return ResourceManager.GetString("Config_WidescreenVerticalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string DebugPageHeader {
            get {
                return ResourceManager.GetString("DebugPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aspect ratio correction.
        /// </summary>
        public static string DosBoxOptions_AspectCorrection {
            get {
                return ResourceManager.GetString("DosBoxOptions_AspectCorrection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do aspect correction, if your output method doesn&apos;t support scaling this can slow things down!.
        /// </summary>
        public static string DosBoxOptions_AspectCorrectionInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_AspectCorrectionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox commands.
        /// </summary>
        public static string DosBoxOptions_Commands {
            get {
                return ResourceManager.GetString("DosBoxOptions_Commands", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Optional).
        /// </summary>
        public static string DosBoxOptions_CommandsOptional {
            get {
                return ResourceManager.GetString("DosBoxOptions_CommandsOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Core.
        /// </summary>
        public static string DosBoxOptions_Core {
            get {
                return ResourceManager.GetString("DosBoxOptions_Core", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CPU Core used in emulation. Auto switches from normal to dynamic if appropriate..
        /// </summary>
        public static string DosBoxOptions_CoreInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_CoreInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cycles.
        /// </summary>
        public static string DosBoxOptions_Cycles {
            get {
                return ResourceManager.GetString("DosBoxOptions_Cycles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of instructions DOSBox tries to emulate each millisecond. Setting this value too high results in sound dropouts and lags. You can also let DOSBox guess the correct value by setting it to max. The default setting (auto) switches to max if appropriate..
        /// </summary>
        public static string DosBoxOptions_CyclesInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_CyclesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Frameskip.
        /// </summary>
        public static string DosBoxOptions_Frameskip {
            get {
                return ResourceManager.GetString("DosBoxOptions_Frameskip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many frames DOSBox skips before drawing one.
        /// </summary>
        public static string DosBoxOptions_FrameskipInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FrameskipInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen.
        /// </summary>
        public static string DosBoxOptions_Fullscreeen {
            get {
                return ResourceManager.GetString("DosBoxOptions_Fullscreeen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start DOSBox directly in fullscreen.
        /// </summary>
        public static string DosBoxOptions_FullscreeenInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreeenInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen double buffering.
        /// </summary>
        public static string DosBoxOptions_FullscreenDubbleBuffering {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenDubbleBuffering", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use double buffering in fullscreen.
        /// </summary>
        public static string DosBoxOptions_FullscreenDubbleBufferingInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenDubbleBufferingInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen resolution.
        /// </summary>
        public static string DosBoxOptions_FullscreenRes {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenRes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What resolution to use for fullscreen: original or fixed size (e.g. 1024x768).
        /// </summary>
        public static string DosBoxOptions_FullscreenResInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenResInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Memory Size.
        /// </summary>
        public static string DosBoxOptions_MemorySize {
            get {
                return ResourceManager.GetString("DosBoxOptions_MemorySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of memory DOSBox has in megabytes.
        /// </summary>
        public static string DosBoxOptions_MemorySizeInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_MemorySizeInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output.
        /// </summary>
        public static string DosBoxOptions_Output {
            get {
                return ResourceManager.GetString("DosBoxOptions_Output", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What to use for output.
        /// </summary>
        public static string DosBoxOptions_OutputInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_OutputInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use recommended settings.
        /// </summary>
        public static string DosBoxOptions_Recommended {
            get {
                return ResourceManager.GetString("DosBoxOptions_Recommended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scaler.
        /// </summary>
        public static string DosBoxOptions_Scaler {
            get {
                return ResourceManager.GetString("DosBoxOptions_Scaler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scaler used to enlarge/enhance low resolution modes.
        /// </summary>
        public static string DosBoxOptions_ScalerInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_ScalerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windowed resolution.
        /// </summary>
        public static string DosBoxOptions_WindowedRes {
            get {
                return ResourceManager.GetString("DosBoxOptions_WindowedRes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scale the window to this size IF the output device supports hardware scaling.
        /// </summary>
        public static string DosBoxOptions_WindowedResInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_WindowedResInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox Settings.
        /// </summary>
        public static string DosBoxSettingsHeader {
            get {
                return ResourceManager.GetString("DosBoxSettingsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting one of the below options to disabled or empty will use the default value specified in the DosBox configuration file. If a specific configuration file has been specified in the settings it may overwrite some of the settings below..
        /// </summary>
        public static string DosBoxSettingsInfo {
            get {
                return ResourceManager.GetString("DosBoxSettingsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed.
        /// </summary>
        public static string Games_Installed {
            get {
                return ResourceManager.GetString("Games_Installed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not Installed.
        /// </summary>
        public static string Games_NotInstalled {
            get {
                return ResourceManager.GetString("Games_NotInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Games.
        /// </summary>
        public static string GamesPageHeader {
            get {
                return ResourceManager.GetString("GamesPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Desktop Application.
        /// </summary>
        public static string GameType_Desktop {
            get {
                return ResourceManager.GetString("GameType_Desktop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox.
        /// </summary>
        public static string GameType_DosBox {
            get {
                return ResourceManager.GetString("GameType_DosBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam.
        /// </summary>
        public static string GameType_Steam {
            get {
                return ResourceManager.GetString("GameType_Steam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft Store.
        /// </summary>
        public static string GameType_WinStore {
            get {
                return ResourceManager.GetString("GameType_WinStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a help page from the available categories to the left.
        /// </summary>
        public static string Help_CategoryHelp {
            get {
                return ResourceManager.GetString("Help_CategoryHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help.
        /// </summary>
        public static string HelpPageHeader {
            get {
                return ResourceManager.GetString("HelpPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drive.
        /// </summary>
        public static string MountOption_Drive {
            get {
                return ResourceManager.GetString("MountOption_Drive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicate that the mount path is a drive or disc.
        /// </summary>
        public static string MountOption_DriveInfo {
            get {
                return ResourceManager.GetString("MountOption_DriveInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File.
        /// </summary>
        public static string MountOption_File {
            get {
                return ResourceManager.GetString("MountOption_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicate that the mount path is a file.
        /// </summary>
        public static string MountOption_FileInfo {
            get {
                return ResourceManager.GetString("MountOption_FileInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mount Path.
        /// </summary>
        public static string MountPathHeader {
            get {
                return ResourceManager.GetString("MountPathHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mount path can either be a file or a drive. If you&apos;re using the GOG version it&apos;ll be the &apos;game.inst&apos; file. If you have a disc image it is usually the .cue file. Otherwise use the drive letter of the game disc..
        /// </summary>
        public static string MountPathInfo {
            get {
                return ResourceManager.GetString("MountPathInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complete Soundtrack.
        /// </summary>
        public static string R1U_CompleteOSTHeader {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Forever, including the GOG version, does not come with the complete soundtrack due to disc space originally not being available. This utility can replace the existing incomplete soundtrack with the complete one, or alternatively revert it back..
        /// </summary>
        public static string R1U_CompleteOSTInfo {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with complete soundtrack.
        /// </summary>
        public static string R1U_CompleteOSTReplace {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Revert back to incomplete soundtrack.
        /// </summary>
        public static string R1U_CompleteOSTRevert {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTRevert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        public static string R1U_TPLSDisabled {
            get {
                return ResourceManager.GetString("R1U_TPLSDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox version.
        /// </summary>
        public static string R1U_TPLSDosBoxVersion {
            get {
                return ResourceManager.GetString("R1U_TPLSDosBoxVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        public static string R1U_TPLSEnabled {
            get {
                return ResourceManager.GetString("R1U_TPLSEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PlayStation Soundtrack.
        /// </summary>
        public static string R1U_TPLSHeader {
            get {
                return ResourceManager.GetString("R1U_TPLSHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default the PC version of Rayman features fewer tracks than the PlayStation version and does not have specific tracks for each part of the levels. By enabling this utility the game will run with the PlayStation soundtrack added on top instead..
        /// </summary>
        public static string R1U_TPLSInfo {
            get {
                return ResourceManager.GetString("R1U_TPLSInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NOTE: This utility may not work on DOSBox versions 0.74-2 or higher. Version 0.74 will still work..
        /// </summary>
        public static string R1U_TPLSInfo2 {
            get {
                return ResourceManager.GetString("R1U_TPLSInfo2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        public static string R1U_TPLSInstall {
            get {
                return ResourceManager.GetString("R1U_TPLSInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman version.
        /// </summary>
        public static string R1U_TPLSRaymanVersion {
            get {
                return ResourceManager.GetString("R1U_TPLSRaymanVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall.
        /// </summary>
        public static string R1U_TPLSUninstall {
            get {
                return ResourceManager.GetString("R1U_TPLSUninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply.
        /// </summary>
        public static string R2U_Apply {
            get {
                return ResourceManager.GetString("R2U_Apply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unofficial Translations.
        /// </summary>
        public static string R2U_TranslationsHeader {
            get {
                return ResourceManager.GetString("R2U_TranslationsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Applying an unofficial translation will replace one of the in-game languages with the selected one. In most cases this will be the English one. The changes can at any time be reverted by applying the original version..
        /// </summary>
        public static string R2U_TranslationsInfo {
            get {
                return ResourceManager.GetString("R2U_TranslationsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        public static string R3U_DirectPlayDisabled {
            get {
                return ResourceManager.GetString("R3U_DirectPlayDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        public static string R3U_DirectPlayEnabled {
            get {
                return ResourceManager.GetString("R3U_DirectPlayEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run the program as administrator in order to set the DirectPlay status.
        /// </summary>
        public static string R3U_DirectPlayErrorInfo {
            get {
                return ResourceManager.GetString("R3U_DirectPlayErrorInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DirectPlay.
        /// </summary>
        public static string R3U_DirectPlayHeader {
            get {
                return ResourceManager.GetString("R3U_DirectPlayHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DirectPlay needs to be enabled in order to run Rayman 3. By default it is usually disabled on Windows 10..
        /// </summary>
        public static string R3U_DirectPlayInfo {
            get {
                return ResourceManager.GetString("R3U_DirectPlayInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create.
        /// </summary>
        public static string RDU_CreateConfigCreate {
            get {
                return ResourceManager.GetString("RDU_CreateConfigCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create Missing Configuration File.
        /// </summary>
        public static string RDU_CreateConfigHeader {
            get {
                return ResourceManager.GetString("RDU_CreateConfigHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to During some Rayman Designer installations the configuration file won&apos;t be created, causing the Mapper to give an error when launching. This utility will fix that issue by creating the configuration file if not present..
        /// </summary>
        public static string RDU_CreateConfigInfo {
            get {
                return ResourceManager.GetString("RDU_CreateConfigInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace Infected Files.
        /// </summary>
        public static string RDU_ReplaceFilesHeader {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some versions of Rayman Designer, including Rayman Forever, have some of the RayKit files infected with a malware. Although it does not appear to be harmful, or even active, and GOG has confirmed there is no danger, you can still safely replace the files with their non-infected versions using this utility..
        /// </summary>
        public static string RDU_ReplaceFilesInfo {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string RDU_ReplaceFilesLanguage {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace.
        /// </summary>
        public static string RDU_ReplaceFilesReplace {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply.
        /// </summary>
        public static string RLU_Apply {
            get {
                return ResourceManager.GetString("RLU_Apply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UbiRay Character.
        /// </summary>
        public static string RLU_UbiRayHeader {
            get {
                return ResourceManager.GetString("RLU_UbiRayHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UbiRay is a character not available in the game to play as, but still in the game files. This utility will modify your save file so that UbiRay is the selected character, thus allowing you to play as him..
        /// </summary>
        public static string RLU_UbiRayInfo {
            get {
                return ResourceManager.GetString("RLU_UbiRayInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: This utility is experimental and might corrupt your save file. Always make a backup before using it..
        /// </summary>
        public static string RLU_UbiRayWarning {
            get {
                return ResourceManager.GetString("RLU_UbiRayWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save.
        /// </summary>
        public static string Save {
            get {
                return ResourceManager.GetString("Save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backups.
        /// </summary>
        public static string Settings_BackupHeader {
            get {
                return ResourceManager.GetString("Settings_BackupHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup location.
        /// </summary>
        public static string Settings_BackupLocation {
            get {
                return ResourceManager.GetString("Settings_BackupLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display exception level.
        /// </summary>
        public static string Settings_DebugExceptionLevel {
            get {
                return ResourceManager.GetString("Settings_DebugExceptionLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The exception level for displaying debug and trace information.
        /// </summary>
        public static string Settings_DebugExceptionLevelInfo {
            get {
                return ResourceManager.GetString("Settings_DebugExceptionLevelInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string Settings_DebugHeader {
            get {
                return ResourceManager.GetString("Settings_DebugHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable animations.
        /// </summary>
        public static string Settings_DesignAnimations {
            get {
                return ResourceManager.GetString("Settings_DesignAnimations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dark.
        /// </summary>
        public static string Settings_DesignDark {
            get {
                return ResourceManager.GetString("Settings_DesignDark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design.
        /// </summary>
        public static string Settings_DesignHeader {
            get {
                return ResourceManager.GetString("Settings_DesignHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Light.
        /// </summary>
        public static string Settings_DesignLight {
            get {
                return ResourceManager.GetString("Settings_DesignLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show games which are not installed.
        /// </summary>
        public static string Settings_DesignShowAllGames {
            get {
                return ResourceManager.GetString("Settings_DesignShowAllGames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show all games on the games page, even if they are not installed.
        /// </summary>
        public static string Settings_DesignShowAllGamesInfo {
            get {
                return ResourceManager.GetString("Settings_DesignShowAllGamesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show detailed game information.
        /// </summary>
        public static string Settings_DesignShowGameDetails {
            get {
                return ResourceManager.GetString("Settings_DesignShowGameDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show detailed game information in the game options dialog.
        /// </summary>
        public static string Settings_DesignShowGameDetailsInfo {
            get {
                return ResourceManager.GetString("Settings_DesignShowGameDetailsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show progress on task bar icon.
        /// </summary>
        public static string Settings_DesignShowTaskBarProgress {
            get {
                return ResourceManager.GetString("Settings_DesignShowTaskBarProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show download progress on the taskbar icon.
        /// </summary>
        public static string Settings_DesignShowTaskBarProgressInfo {
            get {
                return ResourceManager.GetString("Settings_DesignShowTaskBarProgressInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show success messages.
        /// </summary>
        public static string Settings_DesignSuccessMessages {
            get {
                return ResourceManager.GetString("Settings_DesignSuccessMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show a message when an operation has succeeded.
        /// </summary>
        public static string Settings_DesignSuccessMessagesInfo {
            get {
                return ResourceManager.GetString("Settings_DesignSuccessMessagesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox.
        /// </summary>
        public static string Settings_DosBoxHeader {
            get {
                return ResourceManager.GetString("Settings_DosBoxHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox file path.
        /// </summary>
        public static string Settings_DosBoxPath {
            get {
                return ResourceManager.GetString("Settings_DosBoxPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DOSBox executable file path.
        /// </summary>
        public static string Settings_DosBoxPathInfo {
            get {
                return ResourceManager.GetString("Settings_DosBoxPathInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close application when launching a game.
        /// </summary>
        public static string Settings_GeneralCloseOnLaunch {
            get {
                return ResourceManager.GetString("Settings_GeneralCloseOnLaunch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close configuration dialog when saving.
        /// </summary>
        public static string Settings_GeneralCloseOnSave {
            get {
                return ResourceManager.GetString("Settings_GeneralCloseOnSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        public static string Settings_GeneralHeader {
            get {
                return ResourceManager.GetString("Settings_GeneralHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string Settings_Language {
            get {
                return ResourceManager.GetString("Settings_Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contribute with translations.
        /// </summary>
        public static string Settings_LanguageContribute {
            get {
                return ResourceManager.GetString("Settings_LanguageContribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox configuration file path (optional).
        /// </summary>
        public static string Settings_OptionalDosBoxConfigPath {
            get {
                return ResourceManager.GetString("Settings_OptionalDosBoxConfigPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DOSBox configuration file path.
        /// </summary>
        public static string Settings_OptionalDosBoxConfigPathInfo {
            get {
                return ResourceManager.GetString("Settings_OptionalDosBoxConfigPathInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search for installed games.
        /// </summary>
        public static string Settings_StartupGameFinder {
            get {
                return ResourceManager.GetString("Settings_StartupGameFinder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Startup.
        /// </summary>
        public static string Settings_StartupHeader {
            get {
                return ResourceManager.GetString("Settings_StartupHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check for program updates.
        /// </summary>
        public static string Settings_StartupUpdateCheck {
            get {
                return ResourceManager.GetString("Settings_StartupUpdateCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User Level.
        /// </summary>
        public static string Settings_UserLevel {
            get {
                return ResourceManager.GetString("Settings_UserLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Advanced.
        /// </summary>
        public static string Settings_UserLevelAdvanced {
            get {
                return ResourceManager.GetString("Settings_UserLevelAdvanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Advanced user level - for users who want more advanced features above the default ones, but without the technical details.
        /// </summary>
        public static string Settings_UserLevelAdvancedInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelAdvancedInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string Settings_UserLevelDebug {
            get {
                return ResourceManager.GetString("Settings_UserLevelDebug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug user level - for app developers and testers who want advanced debug options and information.
        /// </summary>
        public static string Settings_UserLevelDebugInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelDebugInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user level determines which options and information is available in the application. The higher the user level, the more advanced options and information will be shown..
        /// </summary>
        public static string Settings_UserLevelInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal.
        /// </summary>
        public static string Settings_UserLevelNormal {
            get {
                return ResourceManager.GetString("Settings_UserLevelNormal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal user level - for users who want all the default features without any of the more advanced options or technical details.
        /// </summary>
        public static string Settings_UserLevelNormalInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelNormalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technical.
        /// </summary>
        public static string Settings_UserLevelTechnical {
            get {
                return ResourceManager.GetString("Settings_UserLevelTechnical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technical user level - for users who want more advanced features above the default ones as well as the technical details.
        /// </summary>
        public static string Settings_UserLevelTechnicalInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelTechnicalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        public static string SettingsPageHeader {
            get {
                return ResourceManager.GetString("SettingsPageHeader", resourceCulture);
            }
        }
    }
}
