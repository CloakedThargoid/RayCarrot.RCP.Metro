//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RayCarrot.RCP.Metro {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RayCarrot.RCP.Metro.Localization.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Credits.
        /// </summary>
        public static string About_Credits {
            get {
                return ResourceManager.GetString("About_Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Email.
        /// </summary>
        public static string About_Email {
            get {
                return ResourceManager.GetString("About_Email", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GitHub.
        /// </summary>
        public static string About_GitHub {
            get {
                return ResourceManager.GetString("About_GitHub", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Control Panel is an open source community project created by RayCarrot. This software is a single free to use executable file with the intent to easily access settings and fixes for the various Rayman titles released for Windows.
        ///This is a growing project with more features planned on being added with future updates. The utilities and various configuration tools have been created with help from various members of the Rayman community, all credited below..
        /// </summary>
        public static string About_ProgramInfo {
            get {
                return ResourceManager.GetString("About_ProgramInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Twitter.
        /// </summary>
        public static string About_Twitter {
            get {
                return ResourceManager.GetString("About_Twitter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check for new updates.
        /// </summary>
        public static string About_UpdateCheck {
            get {
                return ResourceManager.GetString("About_UpdateCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update history.
        /// </summary>
        public static string About_UpdateHistory {
            get {
                return ResourceManager.GetString("About_UpdateHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to YouTube.
        /// </summary>
        public static string About_YouTube {
            get {
                return ResourceManager.GetString("About_YouTube", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        public static string AboutPageHeader {
            get {
                return ResourceManager.GetString("AboutPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accept.
        /// </summary>
        public static string Accept {
            get {
                return ResourceManager.GetString("Accept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action succeeded.
        /// </summary>
        public static string ActionSucceeded {
            get {
                return ResourceManager.GetString("ActionSucceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game {0} has already been added.
        /// </summary>
        public static string AddGame_Duplicate {
            get {
                return ResourceManager.GetString("AddGame_Duplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error adding new game.
        /// </summary>
        public static string AddGame_DuplicateHeader {
            get {
                return ResourceManager.GetString("AddGame_DuplicateHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Control Panel.
        /// </summary>
        public static string AppName {
            get {
                return ResourceManager.GetString("AppName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup.
        /// </summary>
        public static string Backup_Backup {
            get {
                return ResourceManager.GetString("Backup_Backup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace any previous backups for {0}.
        /// </summary>
        public static string Backup_Confirm {
            get {
                return ResourceManager.GetString("Backup_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm backup.
        /// </summary>
        public static string Backup_ConfirmHeader {
            get {
                return ResourceManager.GetString("Backup_ConfirmHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup failed for {0}.
        /// </summary>
        public static string Backup_Failed {
            get {
                return ResourceManager.GetString("Backup_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup failed.
        /// </summary>
        public static string Backup_FailedHeader {
            get {
                return ResourceManager.GetString("Backup_FailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Last Backup.
        /// </summary>
        public static string Backup_LastBackupDate {
            get {
                return ResourceManager.GetString("Backup_LastBackupDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup Size.
        /// </summary>
        public static string Backup_LastBackupSize {
            get {
                return ResourceManager.GetString("Backup_LastBackupSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup for {0} could not finish due to not all specified directories being found.
        /// </summary>
        public static string Backup_MissingDirectoriesError {
            get {
                return ResourceManager.GetString("Backup_MissingDirectoriesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No files were found to backup for {0}.
        /// </summary>
        public static string Backup_MissingFilesError {
            get {
                return ResourceManager.GetString("Backup_MissingFilesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore.
        /// </summary>
        public static string Backup_Restore {
            get {
                return ResourceManager.GetString("Backup_Restore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your save files for {0} were successfully backed up.
        /// </summary>
        public static string Backup_Success {
            get {
                return ResourceManager.GetString("Backup_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup successful.
        /// </summary>
        public static string Backup_SuccessHeader {
            get {
                return ResourceManager.GetString("Backup_SuccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup/Restore.
        /// </summary>
        public static string BackupPageHeader {
            get {
                return ResourceManager.GetString("BackupPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string Cancel {
            get {
                return ResourceManager.GetString("Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Button Mapping (keyboard).
        /// </summary>
        public static string Config_ButtonMapping {
            get {
                return ResourceManager.GetString("Config_ButtonMapping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action.
        /// </summary>
        public static string Config_ButtonMappingActionHeader {
            get {
                return ResourceManager.GetString("Config_ButtonMappingActionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As the game doesn&apos;t allow native button remapping you change it here. This will not work for controllers..
        /// </summary>
        public static string Config_ButtonMappingInfo {
            get {
                return ResourceManager.GetString("Config_ButtonMappingInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key.
        /// </summary>
        public static string Config_ButtonMappingKeyHeader {
            get {
                return ResourceManager.GetString("Config_ButtonMappingKeyHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset.
        /// </summary>
        public static string Config_ButtonMappingReset {
            get {
                return ResourceManager.GetString("Config_ButtonMappingReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compressed.
        /// </summary>
        public static string Config_Compressed {
            get {
                return ResourceManager.GetString("Config_Compressed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controller.
        /// </summary>
        public static string Config_Controller {
            get {
                return ResourceManager.GetString("Config_Controller", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Horizontal Axis.
        /// </summary>
        public static string Config_ControllerHorizontal {
            get {
                return ResourceManager.GetString("Config_ControllerHorizontal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If your controller is not recognized you can enable controller support here.
        /// </summary>
        public static string Config_ControllerInfo {
            get {
                return ResourceManager.GetString("Config_ControllerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If your controller is not recognized you can enable controller support here. This will remove any custom button mapping..
        /// </summary>
        public static string Config_ControllerR2Info {
            get {
                return ResourceManager.GetString("Config_ControllerR2Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical Axis.
        /// </summary>
        public static string Config_ControllerVertical {
            get {
                return ResourceManager.GetString("Config_ControllerVertical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dynamic Shadows.
        /// </summary>
        public static string Config_DynamicShadows {
            get {
                return ResourceManager.GetString("Config_DynamicShadows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable native controller support.
        /// </summary>
        public static string Config_EnableNativeController {
            get {
                return ResourceManager.GetString("Config_EnableNativeController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen.
        /// </summary>
        public static string Config_Fullscreen {
            get {
                return ResourceManager.GetString("Config_Fullscreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes the game run in fullscreen, otherwise it&apos;ll run in windowed mode.
        /// </summary>
        public static string Config_FullscreenInfo {
            get {
                return ResourceManager.GetString("Config_FullscreenInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Graphics.
        /// </summary>
        public static string Config_Graphics {
            get {
                return ResourceManager.GetString("Config_Graphics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No valid ubi.ini file was found and creating a new one failed. Try running the program as administrator or changing the folder permissions for the following path: {0}.
        /// </summary>
        public static string Config_InvalidUbiIni {
            get {
                return ResourceManager.GetString("Config_InvalidUbiIni", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string Config_Language {
            get {
                return ResourceManager.GetString("Config_Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sets the default language selected when launching the game. The language can still be changed from the game menu..
        /// </summary>
        public static string Config_LanguageR2Info {
            get {
                return ResourceManager.GetString("Config_LanguageR2Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock to screen resolution.
        /// </summary>
        public static string Config_LockRes {
            get {
                return ResourceManager.GetString("Config_LockRes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locks the horizontal and vertical values to the ones of the current screen resolution.
        /// </summary>
        public static string Config_LockResInfo {
            get {
                return ResourceManager.GetString("Config_LockResInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network.
        /// </summary>
        public static string Config_Network {
            get {
                return ResourceManager.GetString("Config_Network", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolution.
        /// </summary>
        public static string Config_Resolution {
            get {
                return ResourceManager.GetString("Config_Resolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The horizontal screen resolution.
        /// </summary>
        public static string Config_ResolutionHorizontalInfo {
            get {
                return ResourceManager.GetString("Config_ResolutionHorizontalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the widescreen support is not enabled the game will stretch if set to an aspect ratio other than 4:3.
        /// </summary>
        public static string Config_ResolutionR2Info {
            get {
                return ResourceManager.GetString("Config_ResolutionR2Info", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting the resolution to an aspect ratio other than 4:3 will stretch the game, even with the internal widescreen option turned on.
        /// </summary>
        public static string Config_ResolutionRRRInfo {
            get {
                return ResourceManager.GetString("Config_ResolutionRRRInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The vertical screen resolution.
        /// </summary>
        public static string Config_ResolutionVerticalInfo {
            get {
                return ResourceManager.GetString("Config_ResolutionVerticalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Screen Mode.
        /// </summary>
        public static string Config_RRRScreenMode {
            get {
                return ResourceManager.GetString("Config_RRRScreenMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The screen mode options will behave differently depending on the selected resolution. Usually keeping the 4:3 mode enabled will allow the game not to be stretched on different aspect ratios..
        /// </summary>
        public static string Config_RRRScreenModeInfo {
            get {
                return ResourceManager.GetString("Config_RRRScreenModeInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Data Location.
        /// </summary>
        public static string Config_SaveDataLocation {
            get {
                return ResourceManager.GetString("Config_SaveDataLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to App data.
        /// </summary>
        public static string Config_SaveDataLocationAppData {
            get {
                return ResourceManager.GetString("Config_SaveDataLocationAppData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will not change where the game saves it data. Use this only to specify the data location for the backup tool..
        /// </summary>
        public static string Config_SaveDataLocationInfo {
            get {
                return ResourceManager.GetString("Config_SaveDataLocationInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install directory.
        /// </summary>
        public static string Config_SaveDataLocationInstDir {
            get {
                return ResourceManager.GetString("Config_SaveDataLocationInstDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when saving your {0} configuration.
        /// </summary>
        public static string Config_SaveError {
            get {
                return ResourceManager.GetString("Config_SaveError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error saving.
        /// </summary>
        public static string Config_SaveErrorHeader {
            get {
                return ResourceManager.GetString("Config_SaveErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static Shadows.
        /// </summary>
        public static string Config_StaticShadows {
            get {
                return ResourceManager.GetString("Config_StaticShadows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Textures.
        /// </summary>
        public static string Config_Textures {
            get {
                return ResourceManager.GetString("Config_Textures", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 16 bit.
        /// </summary>
        public static string Config_Textures16 {
            get {
                return ResourceManager.GetString("Config_Textures16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 32 bit.
        /// </summary>
        public static string Config_Textures32 {
            get {
                return ResourceManager.GetString("Config_Textures32", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transform and Lightning.
        /// </summary>
        public static string Config_TnL {
            get {
                return ResourceManager.GetString("Config_TnL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uncheck this if there are graphical glitches in the game.
        /// </summary>
        public static string Config_TnLInfo {
            get {
                return ResourceManager.GetString("Config_TnLInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TriLinear.
        /// </summary>
        public static string Config_TriLinear {
            get {
                return ResourceManager.GetString("Config_TriLinear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use connected controller.
        /// </summary>
        public static string Config_UseController {
            get {
                return ResourceManager.GetString("Config_UseController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical widescreen.
        /// </summary>
        public static string Config_VerticalHorizontal {
            get {
                return ResourceManager.GetString("Config_VerticalHorizontal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Video.
        /// </summary>
        public static string Config_Video {
            get {
                return ResourceManager.GetString("Config_Video", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 16 bits per pixel.
        /// </summary>
        public static string Config_Video16Bpp {
            get {
                return ResourceManager.GetString("Config_Video16Bpp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 32 bits per pixel.
        /// </summary>
        public static string Config_Video32Bpp {
            get {
                return ResourceManager.GetString("Config_Video32Bpp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto adjust quality.
        /// </summary>
        public static string Config_VideoAuto {
            get {
                return ResourceManager.GetString("Config_VideoAuto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad quality.
        /// </summary>
        public static string Config_VideoBad {
            get {
                return ResourceManager.GetString("Config_VideoBad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Good quality.
        /// </summary>
        public static string Config_VideoGood {
            get {
                return ResourceManager.GetString("Config_VideoGood", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Horizontal widescreen.
        /// </summary>
        public static string Config_WidescreenHorizontal {
            get {
                return ResourceManager.GetString("Config_WidescreenHorizontal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make the widescreen expand horizontally.
        /// </summary>
        public static string Config_WidescreenHorizontalInfo {
            get {
                return ResourceManager.GetString("Config_WidescreenHorizontalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Widescreen support.
        /// </summary>
        public static string Config_WidescreenSupport {
            get {
                return ResourceManager.GetString("Config_WidescreenSupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Widescreen support ensures that the game is not stretched when running in an aspect ratio other than 4:3.
        /// </summary>
        public static string Config_WidescreenSupportInfo {
            get {
                return ResourceManager.GetString("Config_WidescreenSupportInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make the widescreen shrink vertically.
        /// </summary>
        public static string Config_WidescreenVerticalInfo {
            get {
                return ResourceManager.GetString("Config_WidescreenVerticalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string DebugPageHeader {
            get {
                return ResourceManager.GetString("DebugPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cycles can not be empty.
        /// </summary>
        public static string DosBoxCyclesValidation_InvalidFormat {
            get {
                return ResourceManager.GetString("DosBoxCyclesValidation_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only digits are allowed when using a specified value.
        /// </summary>
        public static string DosBoxCyclesValidation_NonDigit {
            get {
                return ResourceManager.GetString("DosBoxCyclesValidation_NonDigit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cycles value can not be empty.
        /// </summary>
        public static string DosBoxCyclesValidation_NullOrEmpty {
            get {
                return ResourceManager.GetString("DosBoxCyclesValidation_NullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Aspect ratio correction.
        /// </summary>
        public static string DosBoxOptions_AspectCorrection {
            get {
                return ResourceManager.GetString("DosBoxOptions_AspectCorrection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do aspect correction, if your output method doesn&apos;t support scaling this can slow things down!.
        /// </summary>
        public static string DosBoxOptions_AspectCorrectionInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_AspectCorrectionInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox commands.
        /// </summary>
        public static string DosBoxOptions_Commands {
            get {
                return ResourceManager.GetString("DosBoxOptions_Commands", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Optional).
        /// </summary>
        public static string DosBoxOptions_CommandsOptional {
            get {
                return ResourceManager.GetString("DosBoxOptions_CommandsOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Core.
        /// </summary>
        public static string DosBoxOptions_Core {
            get {
                return ResourceManager.GetString("DosBoxOptions_Core", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CPU Core used in emulation. Auto switches from normal to dynamic if appropriate..
        /// </summary>
        public static string DosBoxOptions_CoreInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_CoreInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cycles.
        /// </summary>
        public static string DosBoxOptions_Cycles {
            get {
                return ResourceManager.GetString("DosBoxOptions_Cycles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of instructions DOSBox tries to emulate each millisecond. Setting this value too high results in sound dropouts and lags. You can also let DOSBox guess the correct value by setting it to max. The default setting (auto) switches to max if appropriate..
        /// </summary>
        public static string DosBoxOptions_CyclesInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_CyclesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Frameskip.
        /// </summary>
        public static string DosBoxOptions_Frameskip {
            get {
                return ResourceManager.GetString("DosBoxOptions_Frameskip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many frames DOSBox skips before drawing one.
        /// </summary>
        public static string DosBoxOptions_FrameskipInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FrameskipInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen.
        /// </summary>
        public static string DosBoxOptions_Fullscreeen {
            get {
                return ResourceManager.GetString("DosBoxOptions_Fullscreeen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start DOSBox directly in fullscreen.
        /// </summary>
        public static string DosBoxOptions_FullscreeenInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreeenInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen double buffering.
        /// </summary>
        public static string DosBoxOptions_FullscreenDubbleBuffering {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenDubbleBuffering", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use double buffering in fullscreen.
        /// </summary>
        public static string DosBoxOptions_FullscreenDubbleBufferingInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenDubbleBufferingInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fullscreen resolution.
        /// </summary>
        public static string DosBoxOptions_FullscreenRes {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenRes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What resolution to use for fullscreen: original or fixed size (e.g. 1024x768).
        /// </summary>
        public static string DosBoxOptions_FullscreenResInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_FullscreenResInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Memory Size.
        /// </summary>
        public static string DosBoxOptions_MemorySize {
            get {
                return ResourceManager.GetString("DosBoxOptions_MemorySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of memory DOSBox has in megabytes.
        /// </summary>
        public static string DosBoxOptions_MemorySizeInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_MemorySizeInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output.
        /// </summary>
        public static string DosBoxOptions_Output {
            get {
                return ResourceManager.GetString("DosBoxOptions_Output", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What to use for output.
        /// </summary>
        public static string DosBoxOptions_OutputInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_OutputInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use recommended settings.
        /// </summary>
        public static string DosBoxOptions_Recommended {
            get {
                return ResourceManager.GetString("DosBoxOptions_Recommended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scaler.
        /// </summary>
        public static string DosBoxOptions_Scaler {
            get {
                return ResourceManager.GetString("DosBoxOptions_Scaler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scaler used to enlarge/enhance low resolution modes.
        /// </summary>
        public static string DosBoxOptions_ScalerInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_ScalerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windowed resolution.
        /// </summary>
        public static string DosBoxOptions_WindowedRes {
            get {
                return ResourceManager.GetString("DosBoxOptions_WindowedRes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scale the window to this size IF the output device supports hardware scaling.
        /// </summary>
        public static string DosBoxOptions_WindowedResInfo {
            get {
                return ResourceManager.GetString("DosBoxOptions_WindowedResInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The character &apos;{0}&apos; is not valid.
        /// </summary>
        public static string DosBoxResolutionValidation_InvalidCharacter {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_InvalidCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid format.
        /// </summary>
        public static string DosBoxResolutionValidation_InvalidFormat {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A valid height must be specified.
        /// </summary>
        public static string DosBoxResolutionValidation_InvalidHeight {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_InvalidHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resolution separator &apos;x&apos; must be used.
        /// </summary>
        public static string DosBoxResolutionValidation_MissingSeparator {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_MissingSeparator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resolution separator &apos;x&apos; can only be used once.
        /// </summary>
        public static string DosBoxResolutionValidation_MultipleSeparators {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_MultipleSeparators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resolution value can not be empty.
        /// </summary>
        public static string DosBoxResolutionValidation_NullOrEmpty {
            get {
                return ResourceManager.GetString("DosBoxResolutionValidation_NullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox Settings.
        /// </summary>
        public static string DosBoxSettingsHeader {
            get {
                return ResourceManager.GetString("DosBoxSettingsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setting one of the below options to disabled or empty will use the default value specified in the DosBox configuration file. If a specific configuration file has been specified in the settings it may overwrite some of the settings below..
        /// </summary>
        public static string DosBoxSettingsInfo {
            get {
                return ResourceManager.GetString("DosBoxSettingsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This patch requires its files to be downloaded. Continue?.
        /// </summary>
        public static string Download_Confirm {
            get {
                return ResourceManager.GetString("Download_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm download.
        /// </summary>
        public static string Download_ConfirmHeader {
            get {
                return ResourceManager.GetString("Download_ConfirmHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This patch requires its files to be downloaded. The total size of the download is {0}. Continue?.
        /// </summary>
        public static string Download_ConfirmSize {
            get {
                return ResourceManager.GetString("Download_ConfirmSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The files could not be downloaded..
        /// </summary>
        public static string Download_Error {
            get {
                return ResourceManager.GetString("Download_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No files were found to download.
        /// </summary>
        public static string Download_NoFilesFound {
            get {
                return ResourceManager.GetString("Download_NoFilesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception.
        /// </summary>
        public static string ExceptionMessageHeader {
            get {
                return ResourceManager.GetString("ExceptionMessageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An exception has occurred in the application. Below is the available debug information for the current user level in the Carrot Framework..
        /// </summary>
        public static string ExceptionMessageInfo {
            get {
                return ResourceManager.GetString("ExceptionMessageInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred creating the shortcut.
        /// </summary>
        public static string File_CreatingShortcutError {
            get {
                return ResourceManager.GetString("File_CreatingShortcutError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error creating shortcut.
        /// </summary>
        public static string File_CreatingShortcutErrorHeader {
            get {
                return ResourceManager.GetString("File_CreatingShortcutErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when attempting to run {0}.
        /// </summary>
        public static string File_ErrorLaunchingFile {
            get {
                return ResourceManager.GetString("File_ErrorLaunchingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified file could not be found: {0}.
        /// </summary>
        public static string File_FileNotFound {
            get {
                return ResourceManager.GetString("File_FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found.
        /// </summary>
        public static string File_FileNotFoundHeader {
            get {
                return ResourceManager.GetString("File_FileNotFoundHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location not found.
        /// </summary>
        public static string File_LocationNotFound {
            get {
                return ResourceManager.GetString("File_LocationNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory could not be opened.
        /// </summary>
        public static string File_OpenLocationError {
            get {
                return ResourceManager.GetString("File_OpenLocationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory error.
        /// </summary>
        public static string File_OpenLocationErrorHeader {
            get {
                return ResourceManager.GetString("File_OpenLocationErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shortcut created successfully.
        /// </summary>
        public static string File_ShortcutCreated {
            get {
                return ResourceManager.GetString("File_ShortcutCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install from disc.
        /// </summary>
        public static string GameDisplay_DiscInstall {
            get {
                return ResourceManager.GetString("GameDisplay_DiscInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch.
        /// </summary>
        public static string GameDisplay_Launch {
            get {
                return ResourceManager.GetString("GameDisplay_Launch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locate.
        /// </summary>
        public static string GameDisplay_Locate {
            get {
                return ResourceManager.GetString("GameDisplay_Locate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open location.
        /// </summary>
        public static string GameDisplay_OpenLocation {
            get {
                return ResourceManager.GetString("GameDisplay_OpenLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open community page.
        /// </summary>
        public static string GameDisplay_OpenSteamCommunity {
            get {
                return ResourceManager.GetString("GameDisplay_OpenSteamCommunity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open store page.
        /// </summary>
        public static string GameDisplay_OpenSteamStore {
            get {
                return ResourceManager.GetString("GameDisplay_OpenSteamStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options.
        /// </summary>
        public static string GameDisplay_Options {
            get {
                return ResourceManager.GetString("GameDisplay_Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purchase from GOG.
        /// </summary>
        public static string GameDisplay_PurchaseGOG {
            get {
                return ResourceManager.GetString("GameDisplay_PurchaseGOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purchase from Uplay.
        /// </summary>
        public static string GameDisplay_PurchaseUplay {
            get {
                return ResourceManager.GetString("GameDisplay_PurchaseUplay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purchase from Windows Store.
        /// </summary>
        public static string GameDisplay_PurchaseWinStore {
            get {
                return ResourceManager.GetString("GameDisplay_PurchaseWinStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purchase from Steam.
        /// </summary>
        public static string GameDisplay_Steam {
            get {
                return ResourceManager.GetString("GameDisplay_Steam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Utilities.
        /// </summary>
        public static string GameDisplay_Utilities {
            get {
                return ResourceManager.GetString("GameDisplay_Utilities", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred during the game finder operation.
        /// </summary>
        public static string GameFinder_Error {
            get {
                return ResourceManager.GetString("GameFinder_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following new games were found:.
        /// </summary>
        public static string GameFinder_GamesFound {
            get {
                return ResourceManager.GetString("GameFinder_GamesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed games found.
        /// </summary>
        public static string GameFinder_GamesFoundHeader {
            get {
                return ResourceManager.GetString("GameFinder_GamesFoundHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nGlide config.
        /// </summary>
        public static string GameLink_R2nGlide {
            get {
                return ResourceManager.GetString("GameLink_R2nGlide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapper.
        /// </summary>
        public static string GameLink_RDMapper {
            get {
                return ResourceManager.GetString("GameLink_RDMapper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Setup.
        /// </summary>
        public static string GameLink_Setup {
            get {
                return ResourceManager.GetString("GameLink_Setup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installed.
        /// </summary>
        public static string Games_Installed {
            get {
                return ResourceManager.GetString("Games_Installed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not Installed.
        /// </summary>
        public static string Games_NotInstalled {
            get {
                return ResourceManager.GetString("Games_NotInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Games.
        /// </summary>
        public static string GamesPageHeader {
            get {
                return ResourceManager.GetString("GamesPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Desktop Application.
        /// </summary>
        public static string GameType_Desktop {
            get {
                return ResourceManager.GetString("GameType_Desktop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox.
        /// </summary>
        public static string GameType_DosBox {
            get {
                return ResourceManager.GetString("GameType_DosBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steam.
        /// </summary>
        public static string GameType_Steam {
            get {
                return ResourceManager.GetString("GameType_Steam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft Store.
        /// </summary>
        public static string GameType_WinStore {
            get {
                return ResourceManager.GetString("GameType_WinStore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select a help page from the available categories to the left.
        /// </summary>
        public static string Help_CategoryHelp {
            get {
                return ResourceManager.GetString("Help_CategoryHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Help.
        /// </summary>
        public static string HelpPageHeader {
            get {
                return ResourceManager.GetString("HelpPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select disc to install from.
        /// </summary>
        public static string Installer_BrowseDiscHeader {
            get {
                return ResourceManager.GetString("Installer_BrowseDiscHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string Installer_Cancel {
            get {
                return ResourceManager.GetString("Installer_Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is currently canceling.
        /// </summary>
        public static string Installer_CancelAlreadyRequested {
            get {
                return ResourceManager.GetString("Installer_CancelAlreadyRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel request already received.
        /// </summary>
        public static string Installer_CancelAlreadyRequestedHeader {
            get {
                return ResourceManager.GetString("Installer_CancelAlreadyRequestedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation canceled.
        /// </summary>
        public static string Installer_Canceled {
            get {
                return ResourceManager.GetString("Installer_Canceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you wish to cancel the installation?.
        /// </summary>
        public static string Installer_CancelQuestion {
            get {
                return ResourceManager.GetString("Installer_CancelQuestion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel ongoing installation.
        /// </summary>
        public static string Installer_CancelQuestionHeader {
            get {
                return ResourceManager.GetString("Installer_CancelQuestionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Part of the installation could not be cleaned up under {0}.
        /// </summary>
        public static string Installer_CleanupError {
            get {
                return ResourceManager.GetString("Installer_CleanupError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create desktop shortcut.
        /// </summary>
        public static string Installer_CreateDesktopShortcut {
            get {
                return ResourceManager.GetString("Installer_CreateDesktopShortcut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create start menu shortcut.
        /// </summary>
        public static string Installer_CreateStartMenuShortcut {
            get {
                return ResourceManager.GetString("Installer_CreateStartMenuShortcut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current File Progress.
        /// </summary>
        public static string Installer_CurrentProgress {
            get {
                return ResourceManager.GetString("Installer_CurrentProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected drive has the same label and root path as a previously inserted one. Due to this the installer can not differentiate them. Please rename one of the drives and try again, or mount them as different root directories..
        /// </summary>
        public static string Installer_DriveNameConflict {
            get {
                return ResourceManager.GetString("Installer_DriveNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drive conflict.
        /// </summary>
        public static string Installer_DriveNameConflictHeader {
            get {
                return ResourceManager.GetString("Installer_DriveNameConflictHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation failed.
        /// </summary>
        public static string Installer_Failed {
            get {
                return ResourceManager.GetString("Installer_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action failed.
        /// </summary>
        public static string Installer_FailedHeader {
            get {
                return ResourceManager.GetString("Installer_FailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were {0} file conflicts with the selected directory. Do you wish to overwrite these files?.
        /// </summary>
        public static string Installer_FileConflicts {
            get {
                return ResourceManager.GetString("Installer_FileConflicts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Conflicts.
        /// </summary>
        public static string Installer_FileConflictsHeader {
            get {
                return ResourceManager.GetString("Installer_FileConflictsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file {0} failed to copy over with the error message: {1}
        ///
        ///Try again?.
        /// </summary>
        public static string Installer_FileCopyError {
            get {
                return ResourceManager.GetString("Installer_FileCopyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to copy item to destination.
        /// </summary>
        public static string Installer_FileCopyErrorHeader {
            get {
                return ResourceManager.GetString("Installer_FileCopyErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please insert &quot;{0}&quot; to port {1} and continue, or cancel to cancel the installation.
        /// </summary>
        public static string Installer_InsertDriveRequest {
            get {
                return ResourceManager.GetString("Installer_InsertDriveRequest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insert Drive.
        /// </summary>
        public static string Installer_InsertDriveRequestHeader {
            get {
                return ResourceManager.GetString("Installer_InsertDriveRequestHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        public static string Installer_Install {
            get {
                return ResourceManager.GetString("Installer_Install", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install for all users.
        /// </summary>
        public static string Installer_InstallAllUsers {
            get {
                return ResourceManager.GetString("Installer_InstallAllUsers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified directory does not exist.
        /// </summary>
        public static string Installer_InvalidDirectory {
            get {
                return ResourceManager.GetString("Installer_InvalidDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory not found.
        /// </summary>
        public static string Installer_InvalidDirectoryHeader {
            get {
                return ResourceManager.GetString("Installer_InvalidDirectoryHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} paths were not found on the specified drive. If the game requires more than one drive for installation, please insert the next one..
        /// </summary>
        public static string Installer_MissingFiles {
            get {
                return ResourceManager.GetString("Installer_MissingFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing Paths.
        /// </summary>
        public static string Installer_MissingFilesHeader {
            get {
                return ResourceManager.GetString("Installer_MissingFilesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launch {0}.
        /// </summary>
        public static string Installer_ShortcutName {
            get {
                return ResourceManager.GetString("Installer_ShortcutName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation complete. Run configuration tool for {0} to set up the game..
        /// </summary>
        public static string Installer_Success {
            get {
                return ResourceManager.GetString("Installer_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation Complete.
        /// </summary>
        public static string Installer_SuccessHeader {
            get {
                return ResourceManager.GetString("Installer_SuccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Total Progress.
        /// </summary>
        public static string Installer_TotalProgress {
            get {
                return ResourceManager.GetString("Installer_TotalProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some items were not handled during the installation. Do you wish to retry handling those items?.
        /// </summary>
        public static string Installer_UnhandledItems {
            get {
                return ResourceManager.GetString("Installer_UnhandledItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unhandled Items.
        /// </summary>
        public static string Installer_UnhandledItemsHeader {
            get {
                return ResourceManager.GetString("Installer_UnhandledItemsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DosBox could not be found. Specify a valid path under settings to run this game..
        /// </summary>
        public static string LaunchGame_DosBoxNotFound {
            get {
                return ResourceManager.GetString("LaunchGame_DosBoxNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mount path could not be found. Specify a valid path under the game options to run this game..
        /// </summary>
        public static string LaunchGame_MountPathNotFound {
            get {
                return ResourceManager.GetString("LaunchGame_MountPathNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when attempting to run {0}.
        /// </summary>
        public static string LaunchGame_WinStoreError {
            get {
                return ResourceManager.GetString("LaunchGame_WinStoreError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select Install Directory.
        /// </summary>
        public static string LocateGame_BrowserHeader {
            get {
                return ResourceManager.GetString("LocateGame_BrowserHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when locating the game.
        /// </summary>
        public static string LocateGame_Error {
            get {
                return ResourceManager.GetString("LocateGame_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error locating game.
        /// </summary>
        public static string LocateGame_ErrorHeader {
            get {
                return ResourceManager.GetString("LocateGame_ErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected directory is not valid for this game.
        /// </summary>
        public static string LocateGame_InvalidLocation {
            get {
                return ResourceManager.GetString("LocateGame_InvalidLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Location.
        /// </summary>
        public static string LocateGame_InvalidLocationHeader {
            get {
                return ResourceManager.GetString("LocateGame_InvalidLocationHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game could not be found. Try choosing desktop app as the type instead..
        /// </summary>
        public static string LocateGame_InvalidSteamGame {
            get {
                return ResourceManager.GetString("LocateGame_InvalidSteamGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game not found.
        /// </summary>
        public static string LocateGame_InvalidSteamGameHeader {
            get {
                return ResourceManager.GetString("LocateGame_InvalidSteamGameHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game could not be found under installed Windows Store apps.
        /// </summary>
        public static string LocateGame_InvalidWinStoreGame {
            get {
                return ResourceManager.GetString("LocateGame_InvalidWinStoreGame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Game not found.
        /// </summary>
        public static string LocateGame_InvalidWinStoreGameHeader {
            get {
                return ResourceManager.GetString("LocateGame_InvalidWinStoreGameHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Message.
        /// </summary>
        public static string MessageHeader_Error {
            get {
                return ResourceManager.GetString("MessageHeader_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic Message.
        /// </summary>
        public static string MessageHeader_Generic {
            get {
                return ResourceManager.GetString("MessageHeader_Generic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information Message.
        /// </summary>
        public static string MessageHeader_Information {
            get {
                return ResourceManager.GetString("MessageHeader_Information", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Question Message.
        /// </summary>
        public static string MessageHeader_Question {
            get {
                return ResourceManager.GetString("MessageHeader_Question", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Success Message.
        /// </summary>
        public static string MessageHeader_Success {
            get {
                return ResourceManager.GetString("MessageHeader_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning Message.
        /// </summary>
        public static string MessageHeader_Warning {
            get {
                return ResourceManager.GetString("MessageHeader_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drive.
        /// </summary>
        public static string MountOption_Drive {
            get {
                return ResourceManager.GetString("MountOption_Drive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicate that the mount path is a drive or disc.
        /// </summary>
        public static string MountOption_DriveInfo {
            get {
                return ResourceManager.GetString("MountOption_DriveInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File.
        /// </summary>
        public static string MountOption_File {
            get {
                return ResourceManager.GetString("MountOption_File", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicate that the mount path is a file.
        /// </summary>
        public static string MountOption_FileInfo {
            get {
                return ResourceManager.GetString("MountOption_FileInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mount Path.
        /// </summary>
        public static string MountPathHeader {
            get {
                return ResourceManager.GetString("MountPathHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mount path can either be a file or a drive. If you&apos;re using the GOG version it&apos;ll be the &apos;game.inst&apos; file. If you have a disc image it is usually the .cue file. Otherwise use the drive letter of the game disc..
        /// </summary>
        public static string MountPathInfo {
            get {
                return ResourceManager.GetString("MountPathInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backups were not moved. A backup already exists in {0}.
        /// </summary>
        public static string MoveBackups_BackupAlreadyExists {
            get {
                return ResourceManager.GetString("MoveBackups_BackupAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error moving backup.
        /// </summary>
        public static string MoveBackups_Error {
            get {
                return ResourceManager.GetString("MoveBackups_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moving backups failed.
        /// </summary>
        public static string MoveBackups_ErrorHeader {
            get {
                return ResourceManager.GetString("MoveBackups_ErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No backups found in {0}.
        /// </summary>
        public static string MoveBackups_NoBackupsFound {
            get {
                return ResourceManager.GetString("MoveBackups_NoBackupsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to move existing backups to the new location?.
        /// </summary>
        public static string MoveBackups_Question {
            get {
                return ResourceManager.GetString("MoveBackups_Question", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Move old backups.
        /// </summary>
        public static string MoveBackups_QuestionHeader {
            get {
                return ResourceManager.GetString("MoveBackups_QuestionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The backups have been moved successfully.
        /// </summary>
        public static string MoveBackups_Success {
            get {
                return ResourceManager.GetString("MoveBackups_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ok.
        /// </summary>
        public static string Ok {
            get {
                return ResourceManager.GetString("Ok", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complete Soundtrack.
        /// </summary>
        public static string R1U_CompleteOSTHeader {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman Forever, including the GOG version, does not come with the complete soundtrack due to disc space originally not being available. This utility can replace the existing incomplete soundtrack with the complete one, or alternatively revert it back..
        /// </summary>
        public static string R1U_CompleteOSTInfo {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with complete soundtrack.
        /// </summary>
        public static string R1U_CompleteOSTReplace {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Revert back to incomplete soundtrack.
        /// </summary>
        public static string R1U_CompleteOSTRevert {
            get {
                return ResourceManager.GetString("R1U_CompleteOSTRevert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        public static string R1U_TPLSDisabled {
            get {
                return ResourceManager.GetString("R1U_TPLSDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox version.
        /// </summary>
        public static string R1U_TPLSDosBoxVersion {
            get {
                return ResourceManager.GetString("R1U_TPLSDosBoxVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        public static string R1U_TPLSEnabled {
            get {
                return ResourceManager.GetString("R1U_TPLSEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PlayStation Soundtrack.
        /// </summary>
        public static string R1U_TPLSHeader {
            get {
                return ResourceManager.GetString("R1U_TPLSHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default the PC version of Rayman features fewer tracks than the PlayStation version and does not have specific tracks for each part of the levels. By enabling this utility the game will run with the PlayStation soundtrack added on top instead..
        /// </summary>
        public static string R1U_TPLSInfo {
            get {
                return ResourceManager.GetString("R1U_TPLSInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NOTE: This utility may not work on DOSBox versions 0.74-2 or higher. Version 0.74 will still work..
        /// </summary>
        public static string R1U_TPLSInfo2 {
            get {
                return ResourceManager.GetString("R1U_TPLSInfo2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        public static string R1U_TPLSInstall {
            get {
                return ResourceManager.GetString("R1U_TPLSInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rayman version.
        /// </summary>
        public static string R1U_TPLSRaymanVersion {
            get {
                return ResourceManager.GetString("R1U_TPLSRaymanVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall.
        /// </summary>
        public static string R1U_TPLSUninstall {
            get {
                return ResourceManager.GetString("R1U_TPLSUninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid format.
        /// </summary>
        public static string R2HotKeyValidation_InvalidFormat {
            get {
                return ResourceManager.GetString("R2HotKeyValidation_InvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key is not valid.
        /// </summary>
        public static string R2HotKeyValidation_InvalidKey {
            get {
                return ResourceManager.GetString("R2HotKeyValidation_InvalidKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single key must be used.
        /// </summary>
        public static string R2HotKeyValidation_ModifierKeysUsed {
            get {
                return ResourceManager.GetString("R2HotKeyValidation_ModifierKeysUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply.
        /// </summary>
        public static string R2U_Apply {
            get {
                return ResourceManager.GetString("R2U_Apply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unofficial Translations.
        /// </summary>
        public static string R2U_TranslationsHeader {
            get {
                return ResourceManager.GetString("R2U_TranslationsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Applying an unofficial translation will replace one of the in-game languages with the selected one. In most cases this will be the English one. The changes can at any time be reverted by applying the original version..
        /// </summary>
        public static string R2U_TranslationsInfo {
            get {
                return ResourceManager.GetString("R2U_TranslationsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        public static string R3U_DirectPlayDisabled {
            get {
                return ResourceManager.GetString("R3U_DirectPlayDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        public static string R3U_DirectPlayEnabled {
            get {
                return ResourceManager.GetString("R3U_DirectPlayEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run the program as administrator in order to set the DirectPlay status.
        /// </summary>
        public static string R3U_DirectPlayErrorInfo {
            get {
                return ResourceManager.GetString("R3U_DirectPlayErrorInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DirectPlay.
        /// </summary>
        public static string R3U_DirectPlayHeader {
            get {
                return ResourceManager.GetString("R3U_DirectPlayHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DirectPlay needs to be enabled in order to run Rayman 3. By default it is usually disabled on Windows 10..
        /// </summary>
        public static string R3U_DirectPlayInfo {
            get {
                return ResourceManager.GetString("R3U_DirectPlayInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create.
        /// </summary>
        public static string RDU_CreateConfigCreate {
            get {
                return ResourceManager.GetString("RDU_CreateConfigCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create Missing Configuration File.
        /// </summary>
        public static string RDU_CreateConfigHeader {
            get {
                return ResourceManager.GetString("RDU_CreateConfigHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to During some Rayman Designer installations the configuration file won&apos;t be created, causing the Mapper to give an error when launching. This utility will fix that issue by creating the configuration file if not present..
        /// </summary>
        public static string RDU_CreateConfigInfo {
            get {
                return ResourceManager.GetString("RDU_CreateConfigInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace Infected Files.
        /// </summary>
        public static string RDU_ReplaceFilesHeader {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some versions of Rayman Designer, including Rayman Forever, have some of the RayKit files infected with a malware. Although it does not appear to be harmful, or even active, and GOG has confirmed there is no danger, you can still safely replace the files with their non-infected versions using this utility..
        /// </summary>
        public static string RDU_ReplaceFilesInfo {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string RDU_ReplaceFilesLanguage {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace.
        /// </summary>
        public static string RDU_ReplaceFilesReplace {
            get {
                return ResourceManager.GetString("RDU_ReplaceFilesReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following utilities have been applied to this game and will not be removed when removing the game. To remove the utilities, go to the utilities dialog and disable/uninstall them or revert back to the original option if available..
        /// </summary>
        public static string RemoveGame_UtilityWarning {
            get {
                return ResourceManager.GetString("RemoveGame_UtilityWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Utility warning.
        /// </summary>
        public static string RemoveGame_UtilityWarningHeader {
            get {
                return ResourceManager.GetString("RemoveGame_UtilityWarningHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will replace current {0} save files with backed up ones..
        /// </summary>
        public static string Restore_Confirm {
            get {
                return ResourceManager.GetString("Restore_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Confirm restore.
        /// </summary>
        public static string Restore_ConfirmHeader {
            get {
                return ResourceManager.GetString("Restore_ConfirmHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore failed for {0}.
        /// </summary>
        public static string Restore_Failed {
            get {
                return ResourceManager.GetString("Restore_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore failed.
        /// </summary>
        public static string Restore_FailedHeader {
            get {
                return ResourceManager.GetString("Restore_FailedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no backup found for {0}.
        /// </summary>
        public static string Restore_MissingBackup {
            get {
                return ResourceManager.GetString("Restore_MissingBackup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your save files for {0} were successfully restored.
        /// </summary>
        public static string Restore_Success {
            get {
                return ResourceManager.GetString("Restore_Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restore successful.
        /// </summary>
        public static string Restore_SuccessHeader {
            get {
                return ResourceManager.GetString("Restore_SuccessHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apply.
        /// </summary>
        public static string RLU_Apply {
            get {
                return ResourceManager.GetString("RLU_Apply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UbiRay Character.
        /// </summary>
        public static string RLU_UbiRayHeader {
            get {
                return ResourceManager.GetString("RLU_UbiRayHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UbiRay is a character not available in the game to play as, but still in the game files. This utility will modify your save file so that UbiRay is the selected character, thus allowing you to play as him..
        /// </summary>
        public static string RLU_UbiRayInfo {
            get {
                return ResourceManager.GetString("RLU_UbiRayInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: This utility is experimental and might corrupt your save file. Always make a backup before using it..
        /// </summary>
        public static string RLU_UbiRayWarning {
            get {
                return ResourceManager.GetString("RLU_UbiRayWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        public static string ROU_DebugCommandsDisabled {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        public static string ROU_DebugCommandsEnabled {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Framerate.
        /// </summary>
        public static string ROU_DebugCommandsFramerate {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsFramerate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will set the framerate to run the game in.
        /// </summary>
        public static string ROU_DebugCommandsFramerateInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsFramerateInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug Commands.
        /// </summary>
        public static string ROU_DebugCommandsHeader {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hide mouse pointer.
        /// </summary>
        public static string ROU_DebugCommandsHideMouse {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsHideMouse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will hide the mouse pointer in the game menus.
        /// </summary>
        public static string ROU_DebugCommandsHideMouseInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsHideMouseInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using any of the below debug commands allows the game to be launched in a debug environment, with the commands changing how the game runs..
        /// </summary>
        public static string ROU_DebugCommandsInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invincibility.
        /// </summary>
        public static string ROU_DebugCommandsInvincibility {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsInvincibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This allows the player to not die when taking damage.
        /// </summary>
        public static string ROU_DebugCommandsInvincibilityInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsInvincibilityInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string ROU_DebugCommandsLanguage {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will change the language the game runs in.
        /// </summary>
        public static string ROU_DebugCommandsLanguageInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsLanguageInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Map.
        /// </summary>
        public static string ROU_DebugCommandsMap {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will allow a specific map to be loaded instead of the main menu upon starting the game.
        /// </summary>
        public static string ROU_DebugCommandsMapInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsMapInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max camera zoom.
        /// </summary>
        public static string ROU_DebugCommandsMaxZoom {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsMaxZoom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will max out the camera zoom.
        /// </summary>
        public static string ROU_DebugCommandsMaxZoomInfo {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsMaxZoomInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: Using these debug commands may corrupt your save file. Always make a backup before using them..
        /// </summary>
        public static string ROU_DebugCommandsWarning {
            get {
                return ResourceManager.GetString("ROU_DebugCommandsWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Higher Quality Videos.
        /// </summary>
        public static string ROU_HQVideosHeader {
            get {
                return ResourceManager.GetString("ROU_HQVideosHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The video cutscenes in the PC version are compressed and in lower quality than in the console versions. This utility replaces those videos with the higher quality ones from the console versions..
        /// </summary>
        public static string ROU_HQVideosInfo {
            get {
                return ResourceManager.GetString("ROU_HQVideosInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with the high quality videos.
        /// </summary>
        public static string ROU_HQVideosReplace {
            get {
                return ResourceManager.GetString("ROU_HQVideosReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Revert back to the original videos.
        /// </summary>
        public static string ROU_HQVideosRevert {
            get {
                return ResourceManager.GetString("ROU_HQVideosRevert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update to 1.02 (Disc version).
        /// </summary>
        public static string ROU_UpdateHeader {
            get {
                return ResourceManager.GetString("ROU_UpdateHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In case Rayman Origins has not been automatically updated to its latest version, 1.02, this utility can update it..
        /// </summary>
        public static string ROU_UpdateInfo {
            get {
                return ResourceManager.GetString("ROU_UpdateInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update.
        /// </summary>
        public static string ROU_UpdateUpdate {
            get {
                return ResourceManager.GetString("ROU_UpdateUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save.
        /// </summary>
        public static string Save {
            get {
                return ResourceManager.GetString("Save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backups.
        /// </summary>
        public static string Settings_BackupHeader {
            get {
                return ResourceManager.GetString("Settings_BackupHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Backup location.
        /// </summary>
        public static string Settings_BackupLocation {
            get {
                return ResourceManager.GetString("Settings_BackupLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display exception level.
        /// </summary>
        public static string Settings_DebugExceptionLevel {
            get {
                return ResourceManager.GetString("Settings_DebugExceptionLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The exception level for displaying debug and trace information.
        /// </summary>
        public static string Settings_DebugExceptionLevelInfo {
            get {
                return ResourceManager.GetString("Settings_DebugExceptionLevelInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string Settings_DebugHeader {
            get {
                return ResourceManager.GetString("Settings_DebugHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable animations.
        /// </summary>
        public static string Settings_DesignAnimations {
            get {
                return ResourceManager.GetString("Settings_DesignAnimations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dark.
        /// </summary>
        public static string Settings_DesignDark {
            get {
                return ResourceManager.GetString("Settings_DesignDark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Design.
        /// </summary>
        public static string Settings_DesignHeader {
            get {
                return ResourceManager.GetString("Settings_DesignHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Light.
        /// </summary>
        public static string Settings_DesignLight {
            get {
                return ResourceManager.GetString("Settings_DesignLight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show games which are not installed.
        /// </summary>
        public static string Settings_DesignShowAllGames {
            get {
                return ResourceManager.GetString("Settings_DesignShowAllGames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show all games on the games page, even if they are not installed.
        /// </summary>
        public static string Settings_DesignShowAllGamesInfo {
            get {
                return ResourceManager.GetString("Settings_DesignShowAllGamesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show detailed game information.
        /// </summary>
        public static string Settings_DesignShowGameDetails {
            get {
                return ResourceManager.GetString("Settings_DesignShowGameDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show detailed game information in the game options dialog.
        /// </summary>
        public static string Settings_DesignShowGameDetailsInfo {
            get {
                return ResourceManager.GetString("Settings_DesignShowGameDetailsInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show progress on task bar icon.
        /// </summary>
        public static string Settings_DesignShowTaskBarProgress {
            get {
                return ResourceManager.GetString("Settings_DesignShowTaskBarProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show download progress on the taskbar icon.
        /// </summary>
        public static string Settings_DesignShowTaskBarProgressInfo {
            get {
                return ResourceManager.GetString("Settings_DesignShowTaskBarProgressInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show success messages.
        /// </summary>
        public static string Settings_DesignSuccessMessages {
            get {
                return ResourceManager.GetString("Settings_DesignSuccessMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show a message when an operation has succeeded.
        /// </summary>
        public static string Settings_DesignSuccessMessagesInfo {
            get {
                return ResourceManager.GetString("Settings_DesignSuccessMessagesInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox.
        /// </summary>
        public static string Settings_DosBoxHeader {
            get {
                return ResourceManager.GetString("Settings_DosBoxHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox file path.
        /// </summary>
        public static string Settings_DosBoxPath {
            get {
                return ResourceManager.GetString("Settings_DosBoxPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DOSBox executable file path.
        /// </summary>
        public static string Settings_DosBoxPathInfo {
            get {
                return ResourceManager.GetString("Settings_DosBoxPathInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close application when launching a game.
        /// </summary>
        public static string Settings_GeneralCloseOnLaunch {
            get {
                return ResourceManager.GetString("Settings_GeneralCloseOnLaunch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close configuration dialog when saving.
        /// </summary>
        public static string Settings_GeneralCloseOnSave {
            get {
                return ResourceManager.GetString("Settings_GeneralCloseOnSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        public static string Settings_GeneralHeader {
            get {
                return ResourceManager.GetString("Settings_GeneralHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language.
        /// </summary>
        public static string Settings_Language {
            get {
                return ResourceManager.GetString("Settings_Language", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contribute with translations.
        /// </summary>
        public static string Settings_LanguageContribute {
            get {
                return ResourceManager.GetString("Settings_LanguageContribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DOSBox configuration file path (optional).
        /// </summary>
        public static string Settings_OptionalDosBoxConfigPath {
            get {
                return ResourceManager.GetString("Settings_OptionalDosBoxConfigPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DOSBox configuration file path.
        /// </summary>
        public static string Settings_OptionalDosBoxConfigPathInfo {
            get {
                return ResourceManager.GetString("Settings_OptionalDosBoxConfigPathInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search for installed games.
        /// </summary>
        public static string Settings_StartupGameFinder {
            get {
                return ResourceManager.GetString("Settings_StartupGameFinder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Startup.
        /// </summary>
        public static string Settings_StartupHeader {
            get {
                return ResourceManager.GetString("Settings_StartupHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check for program updates.
        /// </summary>
        public static string Settings_StartupUpdateCheck {
            get {
                return ResourceManager.GetString("Settings_StartupUpdateCheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User Level.
        /// </summary>
        public static string Settings_UserLevel {
            get {
                return ResourceManager.GetString("Settings_UserLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Advanced.
        /// </summary>
        public static string Settings_UserLevelAdvanced {
            get {
                return ResourceManager.GetString("Settings_UserLevelAdvanced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Advanced user level - for users who want more advanced features above the default ones, but without the technical details.
        /// </summary>
        public static string Settings_UserLevelAdvancedInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelAdvancedInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug.
        /// </summary>
        public static string Settings_UserLevelDebug {
            get {
                return ResourceManager.GetString("Settings_UserLevelDebug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug user level - for app developers and testers who want advanced debug options and information.
        /// </summary>
        public static string Settings_UserLevelDebugInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelDebugInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user level determines which options and information is available in the application. The higher the user level, the more advanced options and information will be shown..
        /// </summary>
        public static string Settings_UserLevelInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal.
        /// </summary>
        public static string Settings_UserLevelNormal {
            get {
                return ResourceManager.GetString("Settings_UserLevelNormal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Normal user level - for users who want all the default features without any of the more advanced options or technical details.
        /// </summary>
        public static string Settings_UserLevelNormalInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelNormalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technical.
        /// </summary>
        public static string Settings_UserLevelTechnical {
            get {
                return ResourceManager.GetString("Settings_UserLevelTechnical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Technical user level - for users who want more advanced features above the default ones as well as the technical details.
        /// </summary>
        public static string Settings_UserLevelTechnicalInfo {
            get {
                return ResourceManager.GetString("Settings_UserLevelTechnicalInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        public static string SettingsPageHeader {
            get {
                return ResourceManager.GetString("SettingsPageHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PlayStation soundtrack utility crashed with the error message of: {0}
        ///Restart?.
        /// </summary>
        public static string TPLS_Error {
            get {
                return ResourceManager.GetString("TPLS_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TPLS Error.
        /// </summary>
        public static string TPLS_ErrorHeader {
            get {
                return ResourceManager.GetString("TPLS_ErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred playing the soundtrack.
        /// </summary>
        public static string TPLS_PlaybackError {
            get {
                return ResourceManager.GetString("TPLS_PlaybackError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The soundtrack file is missing.
        /// </summary>
        public static string TPLS_PlaybackError_FileNotFound {
            get {
                return ResourceManager.GetString("TPLS_PlaybackError_FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The soundtrack file is in an incorrect format.
        /// </summary>
        public static string TPLS_PlaybackError_InvalidData {
            get {
                return ResourceManager.GetString("TPLS_PlaybackError_InvalidData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Playback Error.
        /// </summary>
        public static string TPLS_PlaybackErrorHeader {
            get {
                return ResourceManager.GetString("TPLS_PlaybackErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred when attempting to enable write access for the Rayman configuration file.
        /// </summary>
        public static string UbiIniWriteAccess_Error {
            get {
                return ResourceManager.GetString("UbiIniWriteAccess_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To be able to configure the Rayman games without running this program as administrator you will need to accept the following admin prompt.
        /// </summary>
        public static string UbiIniWriteAccess_InfoMessage {
            get {
                return ResourceManager.GetString("UbiIniWriteAccess_InfoMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update Check Failed.
        /// </summary>
        public static string Update_ErrorHeader {
            get {
                return ResourceManager.GetString("Update_ErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The information from the server was not valid.
        /// </summary>
        public static string Update_FormatError {
            get {
                return ResourceManager.GetString("Update_FormatError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occurred while connecting to the server.
        /// </summary>
        public static string Update_GenericError {
            get {
                return ResourceManager.GetString("Update_GenericError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The latest version ({0}) is already installed..
        /// </summary>
        public static string Update_LatestInstalled {
            get {
                return ResourceManager.GetString("Update_LatestInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No new versions found.
        /// </summary>
        public static string Update_LatestInstalledHeader {
            get {
                return ResourceManager.GetString("Update_LatestInstalledHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server manifest could not be read.
        /// </summary>
        public static string Update_ManifestError {
            get {
                return ResourceManager.GetString("Update_ManifestError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error getting news.
        /// </summary>
        public static string Update_NewsError {
            get {
                return ResourceManager.GetString("Update_NewsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown error.
        /// </summary>
        public static string Update_UnknownError {
            get {
                return ResourceManager.GetString("Update_UnknownError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new update is available to download. Download now?
        ///
        ///News: 
        ///{0}.
        /// </summary>
        public static string Update_UpdateAvailable {
            get {
                return ResourceManager.GetString("Update_UpdateAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New version found.
        /// </summary>
        public static string Update_UpdateAvailableHeader {
            get {
                return ResourceManager.GetString("Update_UpdateAvailableHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The updater could not be created. To manually download the new version, go to {0} and download the latest version from there..
        /// </summary>
        public static string Update_UpdaterError {
            get {
                return ResourceManager.GetString("Update_UpdaterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error creating updater.
        /// </summary>
        public static string Update_UpdaterErrorHeader {
            get {
                return ResourceManager.GetString("Update_UpdaterErrorHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A connection could not be established to the server.
        /// </summary>
        public static string Update_WebError {
            get {
                return ResourceManager.GetString("Update_WebError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This utility requires additonal files to be downloaded.
        /// </summary>
        public static string Utility_AdditionalFilesRequired {
            get {
                return ResourceManager.GetString("Utility_AdditionalFilesRequired", resourceCulture);
            }
        }
    }
}
